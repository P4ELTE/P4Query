[] (eip=0 & op=NO_OP) ->
  // 1599: size of: global
  (op' = OP_ALLOC) &
  (x1' = 1599)
  ;

[] (eip=1 & op=NO_OP) ->
  // 112: size of: headers.ethernet without validity bit, size field
  (op' = OP_CONST) &
  (x1' = 112)
  ;

[] (eip=2 & op=NO_OP) ->
  // global address of headers.ethernet.size
  (op' = OP_CONST) &
  (x1' = 720)
  ;

[] (eip=3 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=4 & op=NO_OP) ->
  // 160: size of: headers.ipv4 without validity bit, size field
  (op' = OP_CONST) &
  (x1' = 160)
  ;

[] (eip=5 & op=NO_OP) ->
  // global address of headers.ipv4.size
  (op' = OP_CONST) &
  (x1' = 834)
  ;

[] (eip=6 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=7 & op=NO_OP) ->
  // 1587: label to stdlib::fill_tables, 0: size of: 
  (op' = OP_INVOKE) &
  (x4' = 1587) &
  (x5' = 0)
  ;

[] (eip=8 & op=NO_OP) ->
  // 661: label to stdlib::receive_packet, 0: size of: 
  (op' = OP_INVOKE) &
  (x4' = 661) &
  (x5' = 0)
  ;

[] (eip=9 & op=NO_OP) ->
  // 1803: label to ::main, 0: size of: 
  (op' = OP_INVOKE) &
  (x4' = 1803) &
  (x5' = 0)
  ;

[] (eip=10 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=11 & op=NO_OP) ->
  (op' = DONE)
  ;

// definition of ingress(headers hdr, metadata meta, standard_metadata_t standard_metadata)
// start of block
// if(null::isValid(hdr.ipv4))
// null::isValid(hdr.ipv4)
// hdr.ipv4
[] (eip=12 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=13 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=14 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=15 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4
[] (eip=16 & op=NO_OP) ->
  // 2306: label to null::isValid, 1: size of: 
  (op' = OP_INVOKE) &
  (x4' = 2306) &
  (x5' = 1)
  ;

// return value is used
// end of null::isValid(hdr.ipv4)
[] (eip=17 & op=NO_OP) ->
  // 47: label to jump if not null::isValid(hdr.ipv4)
  (op' = OP_IFEQ) &
  (x1' = 47)
  ;

// start of block
// ingress::port_mapping(hdr, meta, standard_metadata)
[] (eip=18 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=19 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=20 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=21 & op=NO_OP) ->
  // 637: label to ingress::port_mapping, 3: size of: 
  (op' = OP_INVOKE) &
  (x4' = 637) &
  (x5' = 3)
  ;

[] (eip=22 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of ingress::port_mapping(hdr, meta, standard_metadata)
// ingress::bd(hdr, meta, standard_metadata)
[] (eip=23 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=24 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=25 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=26 & op=NO_OP) ->
  // 507: label to ingress::bd, 3: size of: 
  (op' = OP_INVOKE) &
  (x4' = 507) &
  (x5' = 3)
  ;

[] (eip=27 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of ingress::bd(hdr, meta, standard_metadata)
// if(!ingress::ipv4_fib(hdr, meta, standard_metadata).hit)
// !ingress::ipv4_fib(hdr, meta, standard_metadata).hit (size: 1)
// ingress::ipv4_fib(hdr, meta, standard_metadata).hit
// ingress::ipv4_fib(hdr, meta, standard_metadata)
[] (eip=28 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=29 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=30 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=31 & op=NO_OP) ->
  // 534: label to ingress::ipv4_fib, 3: size of: 
  (op' = OP_INVOKE) &
  (x4' = 534) &
  (x5' = 3)
  ;

[] (eip=32 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of ingress::ipv4_fib(hdr, meta, standard_metadata)
[] (eip=33 & op=NO_OP) ->
  // global address of ipv4_fib.hit
  (op' = OP_CONST) &
  (x1' = 1105)
  ;

// end of ingress::ipv4_fib(hdr, meta, standard_metadata).hit
[] (eip=34 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=35 & op=NO_OP) ->
  (op' = OP_NOT)
  ;

// end of !ingress::ipv4_fib(hdr, meta, standard_metadata).hit (size: 1)
[] (eip=36 & op=NO_OP) ->
  // 42: label to jump if not !ingress::ipv4_fib(hdr, meta, standard_metadata).hit
  (op' = OP_IFEQ) &
  (x1' = 42)
  ;

// start of block
// ingress::ipv4_fib_lpm(hdr, meta, standard_metadata)
[] (eip=37 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=38 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=39 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=40 & op=NO_OP) ->
  // 572: label to ingress::ipv4_fib_lpm, 3: size of: 
  (op' = OP_INVOKE) &
  (x4' = 572) &
  (x5' = 3)
  ;

[] (eip=41 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of ingress::ipv4_fib_lpm(hdr, meta, standard_metadata)
// ingress::nexthop(hdr, meta, standard_metadata)
[] (eip=42 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=43 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=44 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=45 & op=NO_OP) ->
  // 610: label to ingress::nexthop, 3: size of: 
  (op' = OP_INVOKE) &
  (x4' = 610) &
  (x5' = 3)
  ;

[] (eip=46 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of ingress::nexthop(hdr, meta, standard_metadata)
// standard_metadata.egress_spec = 1
// 1
[] (eip=47 & op=NO_OP) ->
  // 1: 0th bit of 1
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=48 & op=NO_OP) ->
  // global address of ingress.temp1_bit_9
  (op' = OP_CONST) &
  (x1' = 997)
  ;

[] (eip=49 & op=NO_OP) ->
  // 8: size of: suffix of bit_9
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=50 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=51 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=52 & op=NO_OP) ->
  // global address of ingress.temp1_bit_9
  (op' = OP_CONST) &
  (x1' = 997)
  ;

// end of 1
// standard_metadata.egress_spec
[] (eip=53 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=54 & op=NO_OP) ->
  // 1: index of egress_spec
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=55 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=56 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of standard_metadata.egress_spec
[] (eip=57 & op=NO_OP) ->
  // 9: size of: standard_metadata.egress_spec
  (op' = OP_CONST) &
  (x1' = 9)
  ;

[] (eip=58 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=59 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of standard_metadata.egress_spec = 1
[] (eip=60 & op=NO_OP) ->
  // 0: ingress terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=61 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of ingress(headers hdr, metadata meta, standard_metadata_t standard_metadata)
//

// definition of computeChecksum(headers hdr, metadata meta)
// start of block
// null::update_checksum(1, {hdr.ipv4.version,hdr.ipv4.ihl,hdr.ipv4.diffserv,hdr.ipv4.totalLen,hdr.ipv4.identification,hdr.ipv4.flags,hdr.ipv4.fragOffset,hdr.ipv4.ttl,hdr.ipv4.protocol,hdr.ipv4.srcAddr,hdr.ipv4.dstAddr}, hdr.ipv4.hdrChecksum, 1)
// 1
[] (eip=62 & op=NO_OP) ->
  // 1: ::update_checksum/condition
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=63 & op=NO_OP) ->
  // global address of computeChecksum.temp0_::update_checksum/condition
  (op' = OP_CONST) &
  (x1' = 1006)
  ;

[] (eip=64 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=65 & op=NO_OP) ->
  // global address of computeChecksum.temp0_::update_checksum/condition
  (op' = OP_CONST) &
  (x1' = 1006)
  ;

// end of 1
// {hdr.ipv4.version,hdr.ipv4.ihl,hdr.ipv4.diffserv,hdr.ipv4.totalLen,hdr.ipv4.identification,hdr.ipv4.flags,hdr.ipv4.fragOffset,hdr.ipv4.ttl,hdr.ipv4.protocol,hdr.ipv4.srcAddr,hdr.ipv4.dstAddr}
// hdr.ipv4.version
[] (eip=66 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=67 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=68 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=69 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=70 & op=NO_OP) ->
  // 2: index of version
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=71 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=72 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.version
// hdr.ipv4.ihl
[] (eip=73 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=74 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=75 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=76 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=77 & op=NO_OP) ->
  // 3: index of ihl
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=78 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=79 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.ihl
// hdr.ipv4.diffserv
[] (eip=80 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=81 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=82 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=83 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=84 & op=NO_OP) ->
  // 4: index of diffserv
  (op' = OP_CONST) &
  (x1' = 4)
  ;

[] (eip=85 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=86 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.diffserv
// hdr.ipv4.totalLen
[] (eip=87 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=88 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=89 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=90 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=91 & op=NO_OP) ->
  // 5: index of totalLen
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=92 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=93 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.totalLen
// hdr.ipv4.identification
[] (eip=94 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=95 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=96 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=97 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=98 & op=NO_OP) ->
  // 6: index of identification
  (op' = OP_CONST) &
  (x1' = 6)
  ;

[] (eip=99 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=100 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.identification
// hdr.ipv4.flags
[] (eip=101 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=102 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=103 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=104 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=105 & op=NO_OP) ->
  // 7: index of flags
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=106 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=107 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.flags
// hdr.ipv4.fragOffset
[] (eip=108 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=109 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=110 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=111 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=112 & op=NO_OP) ->
  // 8: index of fragOffset
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=113 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=114 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.fragOffset
// hdr.ipv4.ttl
[] (eip=115 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=116 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=117 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=118 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=119 & op=NO_OP) ->
  // 9: index of ttl
  (op' = OP_CONST) &
  (x1' = 9)
  ;

[] (eip=120 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=121 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.ttl
// hdr.ipv4.protocol
[] (eip=122 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=123 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=124 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=125 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=126 & op=NO_OP) ->
  // 10: index of protocol
  (op' = OP_CONST) &
  (x1' = 10)
  ;

[] (eip=127 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=128 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.protocol
// hdr.ipv4.srcAddr
[] (eip=129 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=130 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=131 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=132 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=133 & op=NO_OP) ->
  // 12: index of srcAddr
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=134 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=135 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.srcAddr
// hdr.ipv4.dstAddr
[] (eip=136 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=137 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=138 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=139 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=140 & op=NO_OP) ->
  // 13: index of dstAddr
  (op' = OP_CONST) &
  (x1' = 13)
  ;

[] (eip=141 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=142 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.dstAddr
// memcpy(src,dst,length)
[] (eip=143 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=144 & op=NO_OP) ->
  // 11: size of: list
  (op' = OP_CONST) &
  (x1' = 11)
  ;

[] (eip=145 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=146 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=147 & op=NO_OP) ->
  // global address of computeChecksum.temp1_LIST_11
  (op' = OP_CONST) &
  (x1' = 1007)
  ;

[] (eip=148 & op=NO_OP) ->
  // 11: size of: list
  (op' = OP_CONST) &
  (x1' = 11)
  ;

[] (eip=149 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=150 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=151 & op=NO_OP) ->
  // 11: size of: list
  (op' = OP_POPN) &
  (x1' = 11)
  ;

[] (eip=152 & op=NO_OP) ->
  // global address of computeChecksum.temp1_LIST_11
  (op' = OP_CONST) &
  (x1' = 1007)
  ;

// end of {hdr.ipv4.version,hdr.ipv4.ihl,hdr.ipv4.diffserv,hdr.ipv4.totalLen,hdr.ipv4.identification,hdr.ipv4.flags,hdr.ipv4.fragOffset,hdr.ipv4.ttl,hdr.ipv4.protocol,hdr.ipv4.srcAddr,hdr.ipv4.dstAddr}
// hdr.ipv4.hdrChecksum
[] (eip=153 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=154 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=155 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=156 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=157 & op=NO_OP) ->
  // 11: index of hdrChecksum
  (op' = OP_CONST) &
  (x1' = 11)
  ;

[] (eip=158 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=159 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.hdrChecksum
// enum field
[] (eip=160 & op=NO_OP) ->
  // 1: enum-type
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=161 & op=NO_OP) ->
  // global address of computeChecksum.temp2_enum-type
  (op' = OP_CONST) &
  (x1' = 1018)
  ;

[] (eip=162 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=163 & op=NO_OP) ->
  // global address of computeChecksum.temp2_enum-type
  (op' = OP_CONST) &
  (x1' = 1018)
  ;

// end of field
[] (eip=164 & op=NO_OP) ->
  // 2345: label to null::update_checksum, 4: size of: 
  (op' = OP_INVOKE) &
  (x4' = 2345) &
  (x5' = 4)
  ;

[] (eip=165 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of null::update_checksum(1, {hdr.ipv4.version,hdr.ipv4.ihl,hdr.ipv4.diffserv,hdr.ipv4.totalLen,hdr.ipv4.identification,hdr.ipv4.flags,hdr.ipv4.fragOffset,hdr.ipv4.ttl,hdr.ipv4.protocol,hdr.ipv4.srcAddr,hdr.ipv4.dstAddr}, hdr.ipv4.hdrChecksum, 1)
[] (eip=166 & op=NO_OP) ->
  // 0: computeChecksum terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=167 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of computeChecksum(headers hdr, metadata meta)
//

// definition of set_vrf(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_12 vrf)
// start of block
// meta.ingress_metadata.vrf = vrf
[] (eip=168 & op=NO_OP) ->
  // 3: local address of vrf
  (op' = OP_LOAD) &
  (x1' = 3)
  ;

// meta.ingress_metadata.vrf
[] (eip=169 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=170 & op=NO_OP) ->
  // 0: index of ingress_metadata
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=171 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=172 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=173 & op=NO_OP) ->
  // 0: index of vrf
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=174 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=175 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of meta.ingress_metadata.vrf
[] (eip=176 & op=NO_OP) ->
  // 12: size of: meta.ingress_metadata.vrf
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=177 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=178 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of meta.ingress_metadata.vrf = vrf
[] (eip=179 & op=NO_OP) ->
  // 0: set_vrf terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=180 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of set_vrf(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_12 vrf)
//

// definition of on_miss(headers hdr, metadata meta, standard_metadata_t standard_metadata)
// start of block
[] (eip=181 & op=NO_OP) ->
  // 0: on_miss terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=182 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of on_miss(headers hdr, metadata meta, standard_metadata_t standard_metadata)
//

// definition of fib_hit_nexthop(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_16 nexthop_index)
// start of block
// meta.ingress_metadata.nexthop_index = nexthop_index
[] (eip=183 & op=NO_OP) ->
  // 3: local address of nexthop_index
  (op' = OP_LOAD) &
  (x1' = 3)
  ;

// meta.ingress_metadata.nexthop_index
[] (eip=184 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=185 & op=NO_OP) ->
  // 0: index of ingress_metadata
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=186 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=187 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=188 & op=NO_OP) ->
  // 2: index of nexthop_index
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=189 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=190 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of meta.ingress_metadata.nexthop_index
[] (eip=191 & op=NO_OP) ->
  // 16: size of: meta.ingress_metadata.nexthop_index
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=192 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=193 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of meta.ingress_metadata.nexthop_index = nexthop_index
// hdr.ipv4.ttl = hdr.ipv4.ttl-8w1
// hdr.ipv4.ttl-8w1 (size: 8)
// hdr.ipv4.ttl
[] (eip=194 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=195 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=196 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=197 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=198 & op=NO_OP) ->
  // 9: index of ttl
  (op' = OP_CONST) &
  (x1' = 9)
  ;

[] (eip=199 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=200 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.ttl
// 8w1
[] (eip=201 & op=NO_OP) ->
  // 1: 0th bit of 8w1
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=202 & op=NO_OP) ->
  // global address of fib_hit_nexthop.temp0_bit_8
  (op' = OP_CONST) &
  (x1' = 1047)
  ;

[] (eip=203 & op=NO_OP) ->
  // 7: size of: suffix of bit_8
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=204 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=205 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=206 & op=NO_OP) ->
  // global address of fib_hit_nexthop.temp0_bit_8
  (op' = OP_CONST) &
  (x1' = 1047)
  ;

// end of 8w1
[] (eip=207 & op=NO_OP) ->
  // 8: size of: hdr.ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=208 & op=NO_OP) ->
  // global address of fib_hit_nexthop.temp1_bit_8
  (op' = OP_CONST) &
  (x1' = 1055)
  ;

[] (eip=209 & op=NO_OP) ->
  // 1801: label to stdlib::subtract, 4: size of: left, right, target, length
  (op' = OP_INVOKE) &
  (x4' = 1801) &
  (x5' = 4)
  ;

// end of hdr.ipv4.ttl-8w1 (size: 8)
// hdr.ipv4.ttl
[] (eip=210 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=211 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=212 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=213 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=214 & op=NO_OP) ->
  // 9: index of ttl
  (op' = OP_CONST) &
  (x1' = 9)
  ;

[] (eip=215 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=216 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.ttl
[] (eip=217 & op=NO_OP) ->
  // 8: size of: hdr.ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=218 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=219 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of hdr.ipv4.ttl = hdr.ipv4.ttl-8w1
[] (eip=220 & op=NO_OP) ->
  // 0: fib_hit_nexthop terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=221 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of fib_hit_nexthop(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_16 nexthop_index)
//

// definition of NoAction()
// start of block
[] (eip=222 & op=NO_OP) ->
  // 0: NoAction terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=223 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of NoAction()
//

// definition of set_egress_details(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_9 egress_spec)
// start of block
[] (eip=224 & op=NO_OP) ->
  // 0: set_egress_details terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=225 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of set_egress_details(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_9 egress_spec)
//

// definition of set_bd(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_16 bd)
// start of block
// meta.ingress_metadata.bd = bd
[] (eip=226 & op=NO_OP) ->
  // 3: local address of bd
  (op' = OP_LOAD) &
  (x1' = 3)
  ;

// meta.ingress_metadata.bd
[] (eip=227 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=228 & op=NO_OP) ->
  // 0: index of ingress_metadata
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=229 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=230 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=231 & op=NO_OP) ->
  // 1: index of bd
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=232 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=233 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of meta.ingress_metadata.bd
[] (eip=234 & op=NO_OP) ->
  // 16: size of: meta.ingress_metadata.bd
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=235 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=236 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of meta.ingress_metadata.bd = bd
[] (eip=237 & op=NO_OP) ->
  // 0: set_bd terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=238 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of set_bd(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_16 bd)
//

// definition of ParserImpl(packet_in packet, headers hdr, metadata meta, standard_metadata_t standard_metadata)
// state start
// state parse_ethernet
// packet_in::extract(packet, hdr.ethernet)
[] (eip=239 & op=NO_OP) ->
  // 0: local address of packet
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

// hdr.ethernet
[] (eip=240 & op=NO_OP) ->
  // 1: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=241 & op=NO_OP) ->
  // 0: index of ethernet
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=242 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=243 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ethernet
[] (eip=244 & op=NO_OP) ->
  // 2310: label to packet_in::extract, 2: size of: 
  (op' = OP_INVOKE) &
  (x4' = 2310) &
  (x5' = 2)
  ;

[] (eip=245 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of packet_in::extract(packet, hdr.ethernet)
// select {hdr.ethernet.etherType}
// {hdr.ethernet.etherType}
// hdr.ethernet.etherType
[] (eip=246 & op=NO_OP) ->
  // 1: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=247 & op=NO_OP) ->
  // 0: index of ethernet
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=248 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=249 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=250 & op=NO_OP) ->
  // 4: index of etherType
  (op' = OP_CONST) &
  (x1' = 4)
  ;

[] (eip=251 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=252 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ethernet.etherType
// memcpy(src,dst,length)
[] (eip=253 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=254 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=255 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=256 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=257 & op=NO_OP) ->
  // global address of ParserImpl.temp0_LIST_1
  (op' = OP_CONST) &
  (x1' = 1222)
  ;

[] (eip=258 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=259 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=260 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=261 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_POPN) &
  (x1' = 1)
  ;

[] (eip=262 & op=NO_OP) ->
  // global address of ParserImpl.temp0_LIST_1
  (op' = OP_CONST) &
  (x1' = 1222)
  ;

// end of {hdr.ethernet.etherType}
// HEAD ~= 16w0x800
[] (eip=263 & op=NO_OP) ->
  (op' = OP_TOP)
  ;

[] (eip=264 & op=NO_OP) ->
  // 0: index of head expression
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=265 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=266 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// 16w0x800
[] (eip=267 & op=NO_OP) ->
  // 0: 11th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=268 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=269 & op=NO_OP) ->
  // 15: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=270 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=271 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=272 & op=NO_OP) ->
  // 0: 10th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=273 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=274 & op=NO_OP) ->
  // 14: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=275 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=276 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=277 & op=NO_OP) ->
  // 0: 9th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=278 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=279 & op=NO_OP) ->
  // 13: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 13)
  ;

[] (eip=280 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=281 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=282 & op=NO_OP) ->
  // 0: 8th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=283 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=284 & op=NO_OP) ->
  // 12: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=285 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=286 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=287 & op=NO_OP) ->
  // 0: 7th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=288 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=289 & op=NO_OP) ->
  // 11: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 11)
  ;

[] (eip=290 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=291 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=292 & op=NO_OP) ->
  // 0: 6th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=293 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=294 & op=NO_OP) ->
  // 10: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 10)
  ;

[] (eip=295 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=296 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=297 & op=NO_OP) ->
  // 0: 5th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=298 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=299 & op=NO_OP) ->
  // 9: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 9)
  ;

[] (eip=300 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=301 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=302 & op=NO_OP) ->
  // 0: 4th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=303 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=304 & op=NO_OP) ->
  // 8: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=305 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=306 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=307 & op=NO_OP) ->
  // 0: 3th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=308 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=309 & op=NO_OP) ->
  // 7: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=310 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=311 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=312 & op=NO_OP) ->
  // 0: 2th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=313 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=314 & op=NO_OP) ->
  // 6: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 6)
  ;

[] (eip=315 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=316 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=317 & op=NO_OP) ->
  // 0: 1th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=318 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=319 & op=NO_OP) ->
  // 5: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=320 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=321 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=322 & op=NO_OP) ->
  // 1: 0th bit of 16w0x800
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=323 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

[] (eip=324 & op=NO_OP) ->
  // 4: size of: suffix of bit_16
  (op' = OP_CONST) &
  (x1' = 4)
  ;

[] (eip=325 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=326 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=327 & op=NO_OP) ->
  // global address of ParserImpl.temp2_bit_16
  (op' = OP_CONST) &
  (x1' = 1224)
  ;

// end of 16w0x800
[] (eip=328 & op=NO_OP) ->
  // 16: size of: 16w0x800
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=329 & op=NO_OP) ->
  // 1760: label to stdlib::memcmp, 3: size of: left, right, length
  (op' = OP_INVOKE) &
  (x4' = 1760) &
  (x5' = 3)
  ;

// return value is used
[] (eip=330 & op=NO_OP) ->
  // 342: label to jump to next case if not HEAD ~= 16w0x800
  (op' = OP_IFEQ) &
  (x1' = 342)
  ;

[] (eip=331 & op=NO_OP) ->
  // 332: label to match
  (op' = OP_GOTO) &
  (x1' = 332)
  ;

// match
[] (eip=332 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// state parse_ipv4
// packet_in::extract(packet, hdr.ipv4)
[] (eip=333 & op=NO_OP) ->
  // 0: local address of packet
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

// hdr.ipv4
[] (eip=334 & op=NO_OP) ->
  // 1: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=335 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=336 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=337 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4
[] (eip=338 & op=NO_OP) ->
  // 2310: label to packet_in::extract, 2: size of: 
  (op' = OP_INVOKE) &
  (x4' = 2310) &
  (x5' = 2)
  ;

[] (eip=339 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of packet_in::extract(packet, hdr.ipv4)
[] (eip=340 & op=NO_OP) ->
  // 0: ParserImpl terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=341 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// HEAD ~= DEFAULT
[] (eip=342 & op=NO_OP) ->
  // 343: label to match
  (op' = OP_GOTO) &
  (x1' = 343)
  ;

// match
[] (eip=343 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=344 & op=NO_OP) ->
  // 0: ParserImpl terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=345 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of ParserImpl(packet_in packet, headers hdr, metadata meta, standard_metadata_t standard_metadata)
//

// definition of DeparserImpl(packet_out packet, headers hdr)
// start of block
// packet_out::emit(packet, hdr.ethernet)
[] (eip=346 & op=NO_OP) ->
  // 0: local address of packet
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

// hdr.ethernet
[] (eip=347 & op=NO_OP) ->
  // 1: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=348 & op=NO_OP) ->
  // 0: index of ethernet
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=349 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=350 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ethernet
[] (eip=351 & op=NO_OP) ->
  // 2343: label to packet_out::emit, 2: size of: 
  (op' = OP_INVOKE) &
  (x4' = 2343) &
  (x5' = 2)
  ;

[] (eip=352 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of packet_out::emit(packet, hdr.ethernet)
// packet_out::emit(packet, hdr.ipv4)
[] (eip=353 & op=NO_OP) ->
  // 0: local address of packet
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

// hdr.ipv4
[] (eip=354 & op=NO_OP) ->
  // 1: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=355 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=356 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=357 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4
[] (eip=358 & op=NO_OP) ->
  // 2343: label to packet_out::emit, 2: size of: 
  (op' = OP_INVOKE) &
  (x4' = 2343) &
  (x5' = 2)
  ;

[] (eip=359 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of packet_out::emit(packet, hdr.ipv4)
[] (eip=360 & op=NO_OP) ->
  // 0: DeparserImpl terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=361 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of DeparserImpl(packet_out packet, headers hdr)
//

// definition of verifyChecksum(headers hdr, metadata meta)
// start of block
// null::verify_checksum(1, {hdr.ipv4.version,hdr.ipv4.ihl,hdr.ipv4.diffserv,hdr.ipv4.totalLen,hdr.ipv4.identification,hdr.ipv4.flags,hdr.ipv4.fragOffset,hdr.ipv4.ttl,hdr.ipv4.protocol,hdr.ipv4.srcAddr,hdr.ipv4.dstAddr}, hdr.ipv4.hdrChecksum, 1)
// 1
[] (eip=362 & op=NO_OP) ->
  // 1: ::update_checksum/condition
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=363 & op=NO_OP) ->
  // global address of verifyChecksum.temp0_::update_checksum/condition
  (op' = OP_CONST) &
  (x1' = 1241)
  ;

[] (eip=364 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=365 & op=NO_OP) ->
  // global address of verifyChecksum.temp0_::update_checksum/condition
  (op' = OP_CONST) &
  (x1' = 1241)
  ;

// end of 1
// {hdr.ipv4.version,hdr.ipv4.ihl,hdr.ipv4.diffserv,hdr.ipv4.totalLen,hdr.ipv4.identification,hdr.ipv4.flags,hdr.ipv4.fragOffset,hdr.ipv4.ttl,hdr.ipv4.protocol,hdr.ipv4.srcAddr,hdr.ipv4.dstAddr}
// hdr.ipv4.version
[] (eip=366 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=367 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=368 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=369 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=370 & op=NO_OP) ->
  // 2: index of version
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=371 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=372 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.version
// hdr.ipv4.ihl
[] (eip=373 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=374 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=375 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=376 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=377 & op=NO_OP) ->
  // 3: index of ihl
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=378 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=379 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.ihl
// hdr.ipv4.diffserv
[] (eip=380 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=381 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=382 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=383 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=384 & op=NO_OP) ->
  // 4: index of diffserv
  (op' = OP_CONST) &
  (x1' = 4)
  ;

[] (eip=385 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=386 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.diffserv
// hdr.ipv4.totalLen
[] (eip=387 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=388 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=389 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=390 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=391 & op=NO_OP) ->
  // 5: index of totalLen
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=392 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=393 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.totalLen
// hdr.ipv4.identification
[] (eip=394 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=395 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=396 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=397 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=398 & op=NO_OP) ->
  // 6: index of identification
  (op' = OP_CONST) &
  (x1' = 6)
  ;

[] (eip=399 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=400 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.identification
// hdr.ipv4.flags
[] (eip=401 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=402 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=403 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=404 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=405 & op=NO_OP) ->
  // 7: index of flags
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=406 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=407 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.flags
// hdr.ipv4.fragOffset
[] (eip=408 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=409 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=410 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=411 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=412 & op=NO_OP) ->
  // 8: index of fragOffset
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=413 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=414 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.fragOffset
// hdr.ipv4.ttl
[] (eip=415 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=416 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=417 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=418 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=419 & op=NO_OP) ->
  // 9: index of ttl
  (op' = OP_CONST) &
  (x1' = 9)
  ;

[] (eip=420 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=421 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.ttl
// hdr.ipv4.protocol
[] (eip=422 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=423 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=424 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=425 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=426 & op=NO_OP) ->
  // 10: index of protocol
  (op' = OP_CONST) &
  (x1' = 10)
  ;

[] (eip=427 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=428 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.protocol
// hdr.ipv4.srcAddr
[] (eip=429 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=430 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=431 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=432 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=433 & op=NO_OP) ->
  // 12: index of srcAddr
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=434 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=435 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.srcAddr
// hdr.ipv4.dstAddr
[] (eip=436 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=437 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=438 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=439 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=440 & op=NO_OP) ->
  // 13: index of dstAddr
  (op' = OP_CONST) &
  (x1' = 13)
  ;

[] (eip=441 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=442 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.dstAddr
// memcpy(src,dst,length)
[] (eip=443 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=444 & op=NO_OP) ->
  // 11: size of: list
  (op' = OP_CONST) &
  (x1' = 11)
  ;

[] (eip=445 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=446 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=447 & op=NO_OP) ->
  // global address of verifyChecksum.temp1_LIST_11
  (op' = OP_CONST) &
  (x1' = 1242)
  ;

[] (eip=448 & op=NO_OP) ->
  // 11: size of: list
  (op' = OP_CONST) &
  (x1' = 11)
  ;

[] (eip=449 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=450 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=451 & op=NO_OP) ->
  // 11: size of: list
  (op' = OP_POPN) &
  (x1' = 11)
  ;

[] (eip=452 & op=NO_OP) ->
  // global address of verifyChecksum.temp1_LIST_11
  (op' = OP_CONST) &
  (x1' = 1242)
  ;

// end of {hdr.ipv4.version,hdr.ipv4.ihl,hdr.ipv4.diffserv,hdr.ipv4.totalLen,hdr.ipv4.identification,hdr.ipv4.flags,hdr.ipv4.fragOffset,hdr.ipv4.ttl,hdr.ipv4.protocol,hdr.ipv4.srcAddr,hdr.ipv4.dstAddr}
// hdr.ipv4.hdrChecksum
[] (eip=453 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=454 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=455 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=456 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=457 & op=NO_OP) ->
  // 11: index of hdrChecksum
  (op' = OP_CONST) &
  (x1' = 11)
  ;

[] (eip=458 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=459 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.hdrChecksum
// enum field
[] (eip=460 & op=NO_OP) ->
  // 1: enum-type
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=461 & op=NO_OP) ->
  // global address of verifyChecksum.temp2_enum-type
  (op' = OP_CONST) &
  (x1' = 1253)
  ;

[] (eip=462 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=463 & op=NO_OP) ->
  // global address of verifyChecksum.temp2_enum-type
  (op' = OP_CONST) &
  (x1' = 1253)
  ;

// end of field
[] (eip=464 & op=NO_OP) ->
  // 2347: label to null::verify_checksum, 4: size of: 
  (op' = OP_INVOKE) &
  (x4' = 2347) &
  (x5' = 4)
  ;

[] (eip=465 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of null::verify_checksum(1, {hdr.ipv4.version,hdr.ipv4.ihl,hdr.ipv4.diffserv,hdr.ipv4.totalLen,hdr.ipv4.identification,hdr.ipv4.flags,hdr.ipv4.fragOffset,hdr.ipv4.ttl,hdr.ipv4.protocol,hdr.ipv4.srcAddr,hdr.ipv4.dstAddr}, hdr.ipv4.hdrChecksum, 1)
[] (eip=466 & op=NO_OP) ->
  // 0: verifyChecksum terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=467 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of verifyChecksum(headers hdr, metadata meta)
//

// definition of egress(headers hdr, metadata meta, standard_metadata_t standard_metadata)
// start of block
// egress::rewrite_mac(hdr, meta, standard_metadata)
[] (eip=468 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=469 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=470 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=471 & op=NO_OP) ->
  // 501: label to egress::rewrite_mac, 3: size of: 
  (op' = OP_INVOKE) &
  (x4' = 501) &
  (x5' = 3)
  ;

[] (eip=472 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of egress::rewrite_mac(hdr, meta, standard_metadata)
[] (eip=473 & op=NO_OP) ->
  // 0: egress terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=474 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of egress(headers hdr, metadata meta, standard_metadata_t standard_metadata)
//

// definition of on_miss(headers hdr, metadata meta, standard_metadata_t standard_metadata)
// start of block
[] (eip=475 & op=NO_OP) ->
  // 0: on_miss terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=476 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of on_miss(headers hdr, metadata meta, standard_metadata_t standard_metadata)
//

// definition of rewrite_src_dst_mac(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_48 smac, bit_48 dmac)
// start of block
// hdr.ethernet.srcAddr = smac
[] (eip=477 & op=NO_OP) ->
  // 3: local address of smac
  (op' = OP_LOAD) &
  (x1' = 3)
  ;

// hdr.ethernet.srcAddr
[] (eip=478 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=479 & op=NO_OP) ->
  // 0: index of ethernet
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=480 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=481 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=482 & op=NO_OP) ->
  // 2: index of srcAddr
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=483 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=484 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ethernet.srcAddr
[] (eip=485 & op=NO_OP) ->
  // 48: size of: hdr.ethernet.srcAddr
  (op' = OP_CONST) &
  (x1' = 48)
  ;

[] (eip=486 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=487 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of hdr.ethernet.srcAddr = smac
// hdr.ethernet.dstAddr = dmac
[] (eip=488 & op=NO_OP) ->
  // 4: local address of dmac
  (op' = OP_LOAD) &
  (x1' = 4)
  ;

// hdr.ethernet.dstAddr
[] (eip=489 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=490 & op=NO_OP) ->
  // 0: index of ethernet
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=491 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=492 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=493 & op=NO_OP) ->
  // 3: index of dstAddr
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=494 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=495 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ethernet.dstAddr
[] (eip=496 & op=NO_OP) ->
  // 48: size of: hdr.ethernet.dstAddr
  (op' = OP_CONST) &
  (x1' = 48)
  ;

[] (eip=497 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=498 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of hdr.ethernet.dstAddr = dmac
[] (eip=499 & op=NO_OP) ->
  // 0: rewrite_src_dst_mac terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=500 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of rewrite_src_dst_mac(headers hdr, metadata meta, standard_metadata_t standard_metadata, bit_48 smac, bit_48 dmac)
//

// definition of rewrite_mac()
// keys
// failure: no entries matched, action performed, leave hit bit at 0
[] (eip=501 & op=NO_OP) ->
  // 505: label to last entry failed, go to junction
  (op' = OP_GOTO) &
  (x1' = 505)
  ;

// success: switch on the hit bit
[] (eip=502 & op=NO_OP) ->
  // 1: new value of hit bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=503 & op=NO_OP) ->
  // global address of rewrite_mac.hit
  (op' = OP_CONST) &
  (x1' = 995)
  ;

[] (eip=504 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=505 & op=NO_OP) ->
  // 0: rewrite_mac terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=506 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of rewrite_mac()
//

// definition of bd()
// keys
// Match entry 0 of bd
[] (eip=507 & op=NO_OP) ->
  // 1: initial true, every key will binary-and it with the results
  (op' = OP_CONST) &
  (x1' = 1)
  ;

// Match key meta.ingress_metadata.bd entry 0 of bd
// meta.ingress_metadata.bd
[] (eip=508 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=509 & op=NO_OP) ->
  // 0: index of ingress_metadata
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=510 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=511 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=512 & op=NO_OP) ->
  // 1: index of bd
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=513 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=514 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of meta.ingress_metadata.bd
[] (eip=515 & op=NO_OP) ->
  // global address of bd.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1089)
  ;

[] (eip=516 & op=NO_OP) ->
  // 16: size of: bd.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=517 & op=NO_OP) ->
  // 1760: label to stdlib::memcmp, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1760) &
  (x5' = 3)
  ;

[] (eip=518 & op=NO_OP) ->
  (op' = OP_MUL)
  ;

[] (eip=519 & op=NO_OP) ->
  (op' = OP_NOT)
  ;

[] (eip=520 & op=NO_OP) ->
  // 522: label to if all memcmp returned 1, i.e. if entry 0 matched, jump to action set_vrf
  (op' = OP_IFEQ) &
  (x1' = 522)
  ;

// failure: no entries matched, action performed, leave hit bit at 0
[] (eip=521 & op=NO_OP) ->
  // 532: label to last entry failed, go to junction
  (op' = OP_GOTO) &
  (x1' = 532)
  ;

// set_vrf(hdr, meta, standard_metadata, vrf)
[] (eip=522 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=523 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=524 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=525 & op=NO_OP) ->
  // global address of vrf
  (op' = OP_CONST) &
  (x1' = 1019)
  ;

[] (eip=526 & op=NO_OP) ->
  // 168: label to ::set_vrf, 4: size of: hdr, meta, standard_metadata, vrf
  (op' = OP_INVOKE) &
  (x4' = 168) &
  (x5' = 4)
  ;

[] (eip=527 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=528 & op=NO_OP) ->
  // 529: label to success case
  (op' = OP_GOTO) &
  (x1' = 529)
  ;

// success: switch on the hit bit
[] (eip=529 & op=NO_OP) ->
  // 1: new value of hit bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=530 & op=NO_OP) ->
  // global address of bd.hit
  (op' = OP_CONST) &
  (x1' = 1088)
  ;

[] (eip=531 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=532 & op=NO_OP) ->
  // 0: bd terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=533 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of bd()
//

// definition of ipv4_fib()
// keys
// Match entry 0 of ipv4_fib
[] (eip=534 & op=NO_OP) ->
  // 1: initial true, every key will binary-and it with the results
  (op' = OP_CONST) &
  (x1' = 1)
  ;

// Match key hdr.ipv4.dstAddr entry 0 of ipv4_fib
// hdr.ipv4.dstAddr
[] (eip=535 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=536 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=537 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=538 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=539 & op=NO_OP) ->
  // 13: index of dstAddr
  (op' = OP_CONST) &
  (x1' = 13)
  ;

[] (eip=540 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=541 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.dstAddr
[] (eip=542 & op=NO_OP) ->
  // global address of ipv4_fib.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1106)
  ;

[] (eip=543 & op=NO_OP) ->
  // 32: size of: ipv4_fib.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 32)
  ;

[] (eip=544 & op=NO_OP) ->
  // 1760: label to stdlib::memcmp, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1760) &
  (x5' = 3)
  ;

[] (eip=545 & op=NO_OP) ->
  (op' = OP_MUL)
  ;

// Match key meta.ingress_metadata.vrf entry 0 of ipv4_fib
// meta.ingress_metadata.vrf
[] (eip=546 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=547 & op=NO_OP) ->
  // 0: index of ingress_metadata
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=548 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=549 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=550 & op=NO_OP) ->
  // 0: index of vrf
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=551 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=552 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of meta.ingress_metadata.vrf
[] (eip=553 & op=NO_OP) ->
  // global address of ipv4_fib.ENTRY[0,1]
  (op' = OP_CONST) &
  (x1' = 1138)
  ;

[] (eip=554 & op=NO_OP) ->
  // 12: size of: ipv4_fib.ENTRY[0,1]
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=555 & op=NO_OP) ->
  // 1760: label to stdlib::memcmp, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1760) &
  (x5' = 3)
  ;

[] (eip=556 & op=NO_OP) ->
  (op' = OP_MUL)
  ;

[] (eip=557 & op=NO_OP) ->
  (op' = OP_NOT)
  ;

[] (eip=558 & op=NO_OP) ->
  // 560: label to if all memcmp returned 1, i.e. if entry 0 matched, jump to action fib_hit_nexthop
  (op' = OP_IFEQ) &
  (x1' = 560)
  ;

// failure: no entries matched, action performed, leave hit bit at 0
[] (eip=559 & op=NO_OP) ->
  // 570: label to last entry failed, go to junction
  (op' = OP_GOTO) &
  (x1' = 570)
  ;

// fib_hit_nexthop(hdr, meta, standard_metadata, nexthop_index)
[] (eip=560 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=561 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=562 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=563 & op=NO_OP) ->
  // global address of nexthop_index
  (op' = OP_CONST) &
  (x1' = 1031)
  ;

[] (eip=564 & op=NO_OP) ->
  // 183: label to ::fib_hit_nexthop, 4: size of: hdr, meta, standard_metadata, nexthop_index
  (op' = OP_INVOKE) &
  (x4' = 183) &
  (x5' = 4)
  ;

[] (eip=565 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=566 & op=NO_OP) ->
  // 567: label to success case
  (op' = OP_GOTO) &
  (x1' = 567)
  ;

// success: switch on the hit bit
[] (eip=567 & op=NO_OP) ->
  // 1: new value of hit bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=568 & op=NO_OP) ->
  // global address of ipv4_fib.hit
  (op' = OP_CONST) &
  (x1' = 1105)
  ;

[] (eip=569 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=570 & op=NO_OP) ->
  // 0: ipv4_fib terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=571 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of ipv4_fib()
//

// definition of ipv4_fib_lpm()
// keys
// Match entry 0 of ipv4_fib_lpm
[] (eip=572 & op=NO_OP) ->
  // 1: initial true, every key will binary-and it with the results
  (op' = OP_CONST) &
  (x1' = 1)
  ;

// Match key hdr.ipv4.dstAddr entry 0 of ipv4_fib_lpm
// hdr.ipv4.dstAddr
[] (eip=573 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=574 & op=NO_OP) ->
  // 1: index of ipv4
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=575 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=576 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=577 & op=NO_OP) ->
  // 13: index of dstAddr
  (op' = OP_CONST) &
  (x1' = 13)
  ;

[] (eip=578 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=579 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of hdr.ipv4.dstAddr
[] (eip=580 & op=NO_OP) ->
  // global address of ipv4_fib_lpm.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1151)
  ;

[] (eip=581 & op=NO_OP) ->
  // 32: size of: ipv4_fib_lpm.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 32)
  ;

[] (eip=582 & op=NO_OP) ->
  // 1760: label to stdlib::memcmp, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1760) &
  (x5' = 3)
  ;

[] (eip=583 & op=NO_OP) ->
  (op' = OP_MUL)
  ;

// Match key meta.ingress_metadata.vrf entry 0 of ipv4_fib_lpm
// meta.ingress_metadata.vrf
[] (eip=584 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=585 & op=NO_OP) ->
  // 0: index of ingress_metadata
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=586 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=587 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=588 & op=NO_OP) ->
  // 0: index of vrf
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=589 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=590 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of meta.ingress_metadata.vrf
[] (eip=591 & op=NO_OP) ->
  // global address of ipv4_fib_lpm.ENTRY[0,1]
  (op' = OP_CONST) &
  (x1' = 1183)
  ;

[] (eip=592 & op=NO_OP) ->
  // 12: size of: ipv4_fib_lpm.ENTRY[0,1]
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=593 & op=NO_OP) ->
  // 1760: label to stdlib::memcmp, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1760) &
  (x5' = 3)
  ;

[] (eip=594 & op=NO_OP) ->
  (op' = OP_MUL)
  ;

[] (eip=595 & op=NO_OP) ->
  (op' = OP_NOT)
  ;

[] (eip=596 & op=NO_OP) ->
  // 598: label to if all memcmp returned 1, i.e. if entry 0 matched, jump to action fib_hit_nexthop
  (op' = OP_IFEQ) &
  (x1' = 598)
  ;

// failure: no entries matched, action performed, leave hit bit at 0
[] (eip=597 & op=NO_OP) ->
  // 608: label to last entry failed, go to junction
  (op' = OP_GOTO) &
  (x1' = 608)
  ;

// fib_hit_nexthop(hdr, meta, standard_metadata, nexthop_index)
[] (eip=598 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=599 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=600 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=601 & op=NO_OP) ->
  // global address of nexthop_index
  (op' = OP_CONST) &
  (x1' = 1031)
  ;

[] (eip=602 & op=NO_OP) ->
  // 183: label to ::fib_hit_nexthop, 4: size of: hdr, meta, standard_metadata, nexthop_index
  (op' = OP_INVOKE) &
  (x4' = 183) &
  (x5' = 4)
  ;

[] (eip=603 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=604 & op=NO_OP) ->
  // 605: label to success case
  (op' = OP_GOTO) &
  (x1' = 605)
  ;

// success: switch on the hit bit
[] (eip=605 & op=NO_OP) ->
  // 1: new value of hit bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=606 & op=NO_OP) ->
  // global address of ipv4_fib_lpm.hit
  (op' = OP_CONST) &
  (x1' = 1150)
  ;

[] (eip=607 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=608 & op=NO_OP) ->
  // 0: ipv4_fib_lpm terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=609 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of ipv4_fib_lpm()
//

// definition of nexthop()
// keys
// Match entry 0 of nexthop
[] (eip=610 & op=NO_OP) ->
  // 1: initial true, every key will binary-and it with the results
  (op' = OP_CONST) &
  (x1' = 1)
  ;

// Match key meta.ingress_metadata.nexthop_index entry 0 of nexthop
// meta.ingress_metadata.nexthop_index
[] (eip=611 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=612 & op=NO_OP) ->
  // 0: index of ingress_metadata
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=613 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=614 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=615 & op=NO_OP) ->
  // 2: index of nexthop_index
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=616 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=617 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of meta.ingress_metadata.nexthop_index
[] (eip=618 & op=NO_OP) ->
  // global address of nexthop.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1196)
  ;

[] (eip=619 & op=NO_OP) ->
  // 16: size of: nexthop.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=620 & op=NO_OP) ->
  // 1760: label to stdlib::memcmp, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1760) &
  (x5' = 3)
  ;

[] (eip=621 & op=NO_OP) ->
  (op' = OP_MUL)
  ;

[] (eip=622 & op=NO_OP) ->
  (op' = OP_NOT)
  ;

[] (eip=623 & op=NO_OP) ->
  // 625: label to if all memcmp returned 1, i.e. if entry 0 matched, jump to action set_egress_details
  (op' = OP_IFEQ) &
  (x1' = 625)
  ;

// failure: no entries matched, action performed, leave hit bit at 0
[] (eip=624 & op=NO_OP) ->
  // 635: label to last entry failed, go to junction
  (op' = OP_GOTO) &
  (x1' = 635)
  ;

// set_egress_details(hdr, meta, standard_metadata, egress_spec)
[] (eip=625 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=626 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=627 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=628 & op=NO_OP) ->
  // global address of egress_spec
  (op' = OP_CONST) &
  (x1' = 1063)
  ;

[] (eip=629 & op=NO_OP) ->
  // 224: label to ::set_egress_details, 4: size of: hdr, meta, standard_metadata, egress_spec
  (op' = OP_INVOKE) &
  (x4' = 224) &
  (x5' = 4)
  ;

[] (eip=630 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=631 & op=NO_OP) ->
  // 632: label to success case
  (op' = OP_GOTO) &
  (x1' = 632)
  ;

// success: switch on the hit bit
[] (eip=632 & op=NO_OP) ->
  // 1: new value of hit bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=633 & op=NO_OP) ->
  // global address of nexthop.hit
  (op' = OP_CONST) &
  (x1' = 1195)
  ;

[] (eip=634 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=635 & op=NO_OP) ->
  // 0: nexthop terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=636 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of nexthop()
//

// definition of port_mapping()
// keys
// Match entry 0 of port_mapping
[] (eip=637 & op=NO_OP) ->
  // 1: initial true, every key will binary-and it with the results
  (op' = OP_CONST) &
  (x1' = 1)
  ;

// Match key standard_metadata.ingress_port entry 0 of port_mapping
// standard_metadata.ingress_port
[] (eip=638 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=639 & op=NO_OP) ->
  // 0: index of ingress_port
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=640 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=641 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

// end of standard_metadata.ingress_port
[] (eip=642 & op=NO_OP) ->
  // global address of port_mapping.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1213)
  ;

[] (eip=643 & op=NO_OP) ->
  // 9: size of: port_mapping.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 9)
  ;

[] (eip=644 & op=NO_OP) ->
  // 1760: label to stdlib::memcmp, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1760) &
  (x5' = 3)
  ;

[] (eip=645 & op=NO_OP) ->
  (op' = OP_MUL)
  ;

[] (eip=646 & op=NO_OP) ->
  (op' = OP_NOT)
  ;

[] (eip=647 & op=NO_OP) ->
  // 649: label to if all memcmp returned 1, i.e. if entry 0 matched, jump to action set_bd
  (op' = OP_IFEQ) &
  (x1' = 649)
  ;

// failure: no entries matched, action performed, leave hit bit at 0
[] (eip=648 & op=NO_OP) ->
  // 659: label to last entry failed, go to junction
  (op' = OP_GOTO) &
  (x1' = 659)
  ;

// set_bd(hdr, meta, standard_metadata, bd)
[] (eip=649 & op=NO_OP) ->
  // 0: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=650 & op=NO_OP) ->
  // 1: local address of meta
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=651 & op=NO_OP) ->
  // 2: local address of standard_metadata
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=652 & op=NO_OP) ->
  // global address of bd
  (op' = OP_CONST) &
  (x1' = 1072)
  ;

[] (eip=653 & op=NO_OP) ->
  // 226: label to ::set_bd, 4: size of: hdr, meta, standard_metadata, bd
  (op' = OP_INVOKE) &
  (x4' = 226) &
  (x5' = 4)
  ;

[] (eip=654 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=655 & op=NO_OP) ->
  // 656: label to success case
  (op' = OP_GOTO) &
  (x1' = 656)
  ;

// success: switch on the hit bit
[] (eip=656 & op=NO_OP) ->
  // 1: new value of hit bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=657 & op=NO_OP) ->
  // global address of port_mapping.hit
  (op' = OP_CONST) &
  (x1' = 1212)
  ;

[] (eip=658 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=659 & op=NO_OP) ->
  // 0: port_mapping terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=660 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of port_mapping()
//

// definition of receive_packet()
[] (eip=661 & op=NO_OP) ->
 
 33/100 : 
  // 662: label to receive packet Packet [headers=[Header [name=ethernet, schema={src=48, dst=48, etherType=16}, data={src=000000000000000000000000000000000000000000000000, dst=000000000000000000000000000000000000000000000000, etherType=0000100000000000}], Header [name=ipv4, schema={version=4, ihl=4, diffserv=8, totalLen=16, identification=16, flags=3, fragOffset=13, ttl=8, protocol=8, hdrChecksum=16, srcAddr=32, dstAddr=32}, data={version=0000, ihl=0000, diffserv=00000000, totalLen=0000000000000000, identification=0000000000000000, flags=000, fragOffset=0000000000000, ttl=00000000, protocol=00000000, hdrChecksum=0000000000000000, srcAddr=00000000000000000000000000000000, dstAddr=00000000000000000000000000000000}]]]
  (op' = OP_GOTO) &
  (x1' = 662)
 + 
 17/50 : 
  // 1055: label to receive packet Packet [headers=[Header [name=ethernet, schema={src=48, dst=48, etherType=16}, data={src=000000000000000000000000000000000000000000000000, dst=000000000000000000000000000000000000000000000000, etherType=0000100000000000}], Header [name=ipv4, schema={version=4, ihl=4, diffserv=8, totalLen=16, identification=16, flags=3, fragOffset=13, ttl=8, protocol=8, hdrChecksum=16, srcAddr=32, dstAddr=32}, data={version=0000, ihl=0000, diffserv=00000000, totalLen=0000000000000000, identification=0000000000000000, flags=000, fragOffset=0000000000000, ttl=00000000, protocol=00000000, hdrChecksum=0000000000000000, srcAddr=00000000000000000000000000000000, dstAddr=11111111111111111111111111111111}]]]
  (op' = OP_GOTO) &
  (x1' = 1055)
 + 
 33/100 : 
  // 1448: label to receive packet Packet [headers=[Header [name=ethernet, schema={src=48, dst=48, etherType=16}, data={src=000000000000000000000000000000000000000000000000, dst=000000000000000000000000000000000000000000000000, etherType=0000000000000000}]]]
  (op' = OP_GOTO) &
  (x1' = 1448)
  ;

// start of header ethernet
// start of field ethernet.src (48)
[] (eip=662 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=663 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=664 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=665 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=666 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=667 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=668 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=669 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=670 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=671 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=672 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=673 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=674 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=675 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=676 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=677 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=678 & op=NO_OP) ->
  // 0: 16th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=679 & op=NO_OP) ->
  // 0: 17th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=680 & op=NO_OP) ->
  // 0: 18th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=681 & op=NO_OP) ->
  // 0: 19th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=682 & op=NO_OP) ->
  // 0: 20th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=683 & op=NO_OP) ->
  // 0: 21th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=684 & op=NO_OP) ->
  // 0: 22th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=685 & op=NO_OP) ->
  // 0: 23th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=686 & op=NO_OP) ->
  // 0: 24th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=687 & op=NO_OP) ->
  // 0: 25th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=688 & op=NO_OP) ->
  // 0: 26th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=689 & op=NO_OP) ->
  // 0: 27th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=690 & op=NO_OP) ->
  // 0: 28th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=691 & op=NO_OP) ->
  // 0: 29th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=692 & op=NO_OP) ->
  // 0: 30th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=693 & op=NO_OP) ->
  // 0: 31th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=694 & op=NO_OP) ->
  // 0: 32th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=695 & op=NO_OP) ->
  // 0: 33th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=696 & op=NO_OP) ->
  // 0: 34th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=697 & op=NO_OP) ->
  // 0: 35th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=698 & op=NO_OP) ->
  // 0: 36th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=699 & op=NO_OP) ->
  // 0: 37th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=700 & op=NO_OP) ->
  // 0: 38th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=701 & op=NO_OP) ->
  // 0: 39th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=702 & op=NO_OP) ->
  // 0: 40th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=703 & op=NO_OP) ->
  // 0: 41th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=704 & op=NO_OP) ->
  // 0: 42th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=705 & op=NO_OP) ->
  // 0: 43th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=706 & op=NO_OP) ->
  // 0: 44th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=707 & op=NO_OP) ->
  // 0: 45th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=708 & op=NO_OP) ->
  // 0: 46th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=709 & op=NO_OP) ->
  // 0: 47th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=710 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=711 & op=NO_OP) ->
  // 47: size of: ethernet.src - 1
  (op' = OP_CONST) &
  (x1' = 47)
  ;

[] (eip=712 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=713 & op=NO_OP) ->
  // global address of target addr of field ethernet.src in packet_in
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=714 & op=NO_OP) ->
  // 48: size of: ethernet.src
  (op' = OP_CONST) &
  (x1' = 48)
  ;

[] (eip=715 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=716 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=717 & op=NO_OP) ->
  // 48: size of: ethernet.src
  (op' = OP_POPN) &
  (x1' = 48)
  ;

// end of field ethernet.src (48)
// start of field ethernet.dst (48)
[] (eip=718 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=719 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=720 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=721 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=722 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=723 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=724 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=725 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=726 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=727 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=728 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=729 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=730 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=731 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=732 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=733 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=734 & op=NO_OP) ->
  // 0: 16th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=735 & op=NO_OP) ->
  // 0: 17th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=736 & op=NO_OP) ->
  // 0: 18th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=737 & op=NO_OP) ->
  // 0: 19th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=738 & op=NO_OP) ->
  // 0: 20th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=739 & op=NO_OP) ->
  // 0: 21th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=740 & op=NO_OP) ->
  // 0: 22th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=741 & op=NO_OP) ->
  // 0: 23th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=742 & op=NO_OP) ->
  // 0: 24th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=743 & op=NO_OP) ->
  // 0: 25th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=744 & op=NO_OP) ->
  // 0: 26th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=745 & op=NO_OP) ->
  // 0: 27th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=746 & op=NO_OP) ->
  // 0: 28th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=747 & op=NO_OP) ->
  // 0: 29th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=748 & op=NO_OP) ->
  // 0: 30th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=749 & op=NO_OP) ->
  // 0: 31th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=750 & op=NO_OP) ->
  // 0: 32th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=751 & op=NO_OP) ->
  // 0: 33th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=752 & op=NO_OP) ->
  // 0: 34th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=753 & op=NO_OP) ->
  // 0: 35th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=754 & op=NO_OP) ->
  // 0: 36th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=755 & op=NO_OP) ->
  // 0: 37th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=756 & op=NO_OP) ->
  // 0: 38th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=757 & op=NO_OP) ->
  // 0: 39th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=758 & op=NO_OP) ->
  // 0: 40th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=759 & op=NO_OP) ->
  // 0: 41th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=760 & op=NO_OP) ->
  // 0: 42th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=761 & op=NO_OP) ->
  // 0: 43th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=762 & op=NO_OP) ->
  // 0: 44th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=763 & op=NO_OP) ->
  // 0: 45th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=764 & op=NO_OP) ->
  // 0: 46th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=765 & op=NO_OP) ->
  // 0: 47th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=766 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=767 & op=NO_OP) ->
  // 47: size of: ethernet.dst - 1
  (op' = OP_CONST) &
  (x1' = 47)
  ;

[] (eip=768 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=769 & op=NO_OP) ->
  // global address of target addr of field ethernet.dst in packet_in
  (op' = OP_CONST) &
  (x1' = 49)
  ;

[] (eip=770 & op=NO_OP) ->
  // 48: size of: ethernet.dst
  (op' = OP_CONST) &
  (x1' = 48)
  ;

[] (eip=771 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=772 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=773 & op=NO_OP) ->
  // 48: size of: ethernet.dst
  (op' = OP_POPN) &
  (x1' = 48)
  ;

// end of field ethernet.dst (48)
// start of field ethernet.etherType (16)
[] (eip=774 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=775 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=776 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=777 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=778 & op=NO_OP) ->
  // 1: 4th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=779 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=780 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=781 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=782 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=783 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=784 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=785 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=786 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=787 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=788 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=789 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=790 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=791 & op=NO_OP) ->
  // 15: size of: ethernet.etherType - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=792 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=793 & op=NO_OP) ->
  // global address of target addr of field ethernet.etherType in packet_in
  (op' = OP_CONST) &
  (x1' = 97)
  ;

[] (eip=794 & op=NO_OP) ->
  // 16: size of: ethernet.etherType
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=795 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=796 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=797 & op=NO_OP) ->
  // 16: size of: ethernet.etherType
  (op' = OP_POPN) &
  (x1' = 16)
  ;

// end of field ethernet.etherType (16)
// end of header ethernet
// start of header ipv4
// start of field ipv4.version (4)
[] (eip=798 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=799 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=800 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=801 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=802 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=803 & op=NO_OP) ->
  // 3: size of: ipv4.version - 1
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=804 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=805 & op=NO_OP) ->
  // global address of target addr of field ipv4.version in packet_in
  (op' = OP_CONST) &
  (x1' = 113)
  ;

[] (eip=806 & op=NO_OP) ->
  // 4: size of: ipv4.version
  (op' = OP_CONST) &
  (x1' = 4)
  ;

[] (eip=807 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=808 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=809 & op=NO_OP) ->
  // 4: size of: ipv4.version
  (op' = OP_POPN) &
  (x1' = 4)
  ;

// end of field ipv4.version (4)
// start of field ipv4.ihl (4)
[] (eip=810 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=811 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=812 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=813 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=814 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=815 & op=NO_OP) ->
  // 3: size of: ipv4.ihl - 1
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=816 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=817 & op=NO_OP) ->
  // global address of target addr of field ipv4.ihl in packet_in
  (op' = OP_CONST) &
  (x1' = 117)
  ;

[] (eip=818 & op=NO_OP) ->
  // 4: size of: ipv4.ihl
  (op' = OP_CONST) &
  (x1' = 4)
  ;

[] (eip=819 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=820 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=821 & op=NO_OP) ->
  // 4: size of: ipv4.ihl
  (op' = OP_POPN) &
  (x1' = 4)
  ;

// end of field ipv4.ihl (4)
// start of field ipv4.diffserv (8)
[] (eip=822 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=823 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=824 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=825 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=826 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=827 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=828 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=829 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=830 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=831 & op=NO_OP) ->
  // 7: size of: ipv4.diffserv - 1
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=832 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=833 & op=NO_OP) ->
  // global address of target addr of field ipv4.diffserv in packet_in
  (op' = OP_CONST) &
  (x1' = 121)
  ;

[] (eip=834 & op=NO_OP) ->
  // 8: size of: ipv4.diffserv
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=835 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=836 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=837 & op=NO_OP) ->
  // 8: size of: ipv4.diffserv
  (op' = OP_POPN) &
  (x1' = 8)
  ;

// end of field ipv4.diffserv (8)
// start of field ipv4.totalLen (16)
[] (eip=838 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=839 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=840 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=841 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=842 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=843 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=844 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=845 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=846 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=847 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=848 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=849 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=850 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=851 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=852 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=853 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=854 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=855 & op=NO_OP) ->
  // 15: size of: ipv4.totalLen - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=856 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=857 & op=NO_OP) ->
  // global address of target addr of field ipv4.totalLen in packet_in
  (op' = OP_CONST) &
  (x1' = 129)
  ;

[] (eip=858 & op=NO_OP) ->
  // 16: size of: ipv4.totalLen
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=859 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=860 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=861 & op=NO_OP) ->
  // 16: size of: ipv4.totalLen
  (op' = OP_POPN) &
  (x1' = 16)
  ;

// end of field ipv4.totalLen (16)
// start of field ipv4.identification (16)
[] (eip=862 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=863 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=864 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=865 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=866 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=867 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=868 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=869 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=870 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=871 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=872 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=873 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=874 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=875 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=876 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=877 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=878 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=879 & op=NO_OP) ->
  // 15: size of: ipv4.identification - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=880 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=881 & op=NO_OP) ->
  // global address of target addr of field ipv4.identification in packet_in
  (op' = OP_CONST) &
  (x1' = 145)
  ;

[] (eip=882 & op=NO_OP) ->
  // 16: size of: ipv4.identification
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=883 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=884 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=885 & op=NO_OP) ->
  // 16: size of: ipv4.identification
  (op' = OP_POPN) &
  (x1' = 16)
  ;

// end of field ipv4.identification (16)
// start of field ipv4.flags (3)
[] (eip=886 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=887 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=888 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=889 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=890 & op=NO_OP) ->
  // 2: size of: ipv4.flags - 1
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=891 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=892 & op=NO_OP) ->
  // global address of target addr of field ipv4.flags in packet_in
  (op' = OP_CONST) &
  (x1' = 161)
  ;

[] (eip=893 & op=NO_OP) ->
  // 3: size of: ipv4.flags
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=894 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=895 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=896 & op=NO_OP) ->
  // 3: size of: ipv4.flags
  (op' = OP_POPN) &
  (x1' = 3)
  ;

// end of field ipv4.flags (3)
// start of field ipv4.fragOffset (13)
[] (eip=897 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=898 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=899 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=900 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=901 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=902 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=903 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=904 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=905 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=906 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=907 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=908 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=909 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=910 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=911 & op=NO_OP) ->
  // 12: size of: ipv4.fragOffset - 1
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=912 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=913 & op=NO_OP) ->
  // global address of target addr of field ipv4.fragOffset in packet_in
  (op' = OP_CONST) &
  (x1' = 164)
  ;

[] (eip=914 & op=NO_OP) ->
  // 13: size of: ipv4.fragOffset
  (op' = OP_CONST) &
  (x1' = 13)
  ;

[] (eip=915 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=916 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=917 & op=NO_OP) ->
  // 13: size of: ipv4.fragOffset
  (op' = OP_POPN) &
  (x1' = 13)
  ;

// end of field ipv4.fragOffset (13)
// start of field ipv4.ttl (8)
[] (eip=918 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=919 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=920 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=921 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=922 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=923 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=924 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=925 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=926 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=927 & op=NO_OP) ->
  // 7: size of: ipv4.ttl - 1
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=928 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=929 & op=NO_OP) ->
  // global address of target addr of field ipv4.ttl in packet_in
  (op' = OP_CONST) &
  (x1' = 177)
  ;

[] (eip=930 & op=NO_OP) ->
  // 8: size of: ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=931 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=932 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=933 & op=NO_OP) ->
  // 8: size of: ipv4.ttl
  (op' = OP_POPN) &
  (x1' = 8)
  ;

// end of field ipv4.ttl (8)
// start of field ipv4.protocol (8)
[] (eip=934 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=935 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=936 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=937 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=938 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=939 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=940 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=941 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=942 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=943 & op=NO_OP) ->
  // 7: size of: ipv4.protocol - 1
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=944 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=945 & op=NO_OP) ->
  // global address of target addr of field ipv4.protocol in packet_in
  (op' = OP_CONST) &
  (x1' = 185)
  ;

[] (eip=946 & op=NO_OP) ->
  // 8: size of: ipv4.protocol
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=947 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=948 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=949 & op=NO_OP) ->
  // 8: size of: ipv4.protocol
  (op' = OP_POPN) &
  (x1' = 8)
  ;

// end of field ipv4.protocol (8)
// start of field ipv4.hdrChecksum (16)
[] (eip=950 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=951 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=952 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=953 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=954 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=955 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=956 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=957 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=958 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=959 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=960 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=961 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=962 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=963 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=964 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=965 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=966 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=967 & op=NO_OP) ->
  // 15: size of: ipv4.hdrChecksum - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=968 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=969 & op=NO_OP) ->
  // global address of target addr of field ipv4.hdrChecksum in packet_in
  (op' = OP_CONST) &
  (x1' = 193)
  ;

[] (eip=970 & op=NO_OP) ->
  // 16: size of: ipv4.hdrChecksum
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=971 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=972 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=973 & op=NO_OP) ->
  // 16: size of: ipv4.hdrChecksum
  (op' = OP_POPN) &
  (x1' = 16)
  ;

// end of field ipv4.hdrChecksum (16)
// start of field ipv4.srcAddr (32)
[] (eip=974 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=975 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=976 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=977 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=978 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=979 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=980 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=981 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=982 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=983 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=984 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=985 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=986 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=987 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=988 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=989 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=990 & op=NO_OP) ->
  // 0: 16th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=991 & op=NO_OP) ->
  // 0: 17th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=992 & op=NO_OP) ->
  // 0: 18th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=993 & op=NO_OP) ->
  // 0: 19th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=994 & op=NO_OP) ->
  // 0: 20th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=995 & op=NO_OP) ->
  // 0: 21th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=996 & op=NO_OP) ->
  // 0: 22th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=997 & op=NO_OP) ->
  // 0: 23th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=998 & op=NO_OP) ->
  // 0: 24th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=999 & op=NO_OP) ->
  // 0: 25th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1000 & op=NO_OP) ->
  // 0: 26th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1001 & op=NO_OP) ->
  // 0: 27th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1002 & op=NO_OP) ->
  // 0: 28th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1003 & op=NO_OP) ->
  // 0: 29th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1004 & op=NO_OP) ->
  // 0: 30th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1005 & op=NO_OP) ->
  // 0: 31th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1006 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1007 & op=NO_OP) ->
  // 31: size of: ipv4.srcAddr - 1
  (op' = OP_CONST) &
  (x1' = 31)
  ;

[] (eip=1008 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1009 & op=NO_OP) ->
  // global address of target addr of field ipv4.srcAddr in packet_in
  (op' = OP_CONST) &
  (x1' = 209)
  ;

[] (eip=1010 & op=NO_OP) ->
  // 32: size of: ipv4.srcAddr
  (op' = OP_CONST) &
  (x1' = 32)
  ;

[] (eip=1011 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1012 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1013 & op=NO_OP) ->
  // 32: size of: ipv4.srcAddr
  (op' = OP_POPN) &
  (x1' = 32)
  ;

// end of field ipv4.srcAddr (32)
// start of field ipv4.dstAddr (32)
[] (eip=1014 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1015 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1016 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1017 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1018 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1019 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1020 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1021 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1022 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1023 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1024 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1025 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1026 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1027 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1028 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1029 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1030 & op=NO_OP) ->
  // 0: 16th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1031 & op=NO_OP) ->
  // 0: 17th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1032 & op=NO_OP) ->
  // 0: 18th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1033 & op=NO_OP) ->
  // 0: 19th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1034 & op=NO_OP) ->
  // 0: 20th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1035 & op=NO_OP) ->
  // 0: 21th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1036 & op=NO_OP) ->
  // 0: 22th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1037 & op=NO_OP) ->
  // 0: 23th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1038 & op=NO_OP) ->
  // 0: 24th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1039 & op=NO_OP) ->
  // 0: 25th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1040 & op=NO_OP) ->
  // 0: 26th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1041 & op=NO_OP) ->
  // 0: 27th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1042 & op=NO_OP) ->
  // 0: 28th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1043 & op=NO_OP) ->
  // 0: 29th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1044 & op=NO_OP) ->
  // 0: 30th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1045 & op=NO_OP) ->
  // 0: 31th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1046 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1047 & op=NO_OP) ->
  // 31: size of: ipv4.dstAddr - 1
  (op' = OP_CONST) &
  (x1' = 31)
  ;

[] (eip=1048 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1049 & op=NO_OP) ->
  // global address of target addr of field ipv4.dstAddr in packet_in
  (op' = OP_CONST) &
  (x1' = 241)
  ;

[] (eip=1050 & op=NO_OP) ->
  // 32: size of: ipv4.dstAddr
  (op' = OP_CONST) &
  (x1' = 32)
  ;

[] (eip=1051 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1052 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1053 & op=NO_OP) ->
  // 32: size of: ipv4.dstAddr
  (op' = OP_POPN) &
  (x1' = 32)
  ;

// end of field ipv4.dstAddr (32)
// end of header ipv4
[] (eip=1054 & op=NO_OP) ->
  // 1585: label to packet received, go to junction
  (op' = OP_GOTO) &
  (x1' = 1585)
  ;

// start of header ethernet
// start of field ethernet.src (48)
[] (eip=1055 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1056 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1057 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1058 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1059 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1060 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1061 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1062 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1063 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1064 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1065 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1066 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1067 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1068 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1069 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1070 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1071 & op=NO_OP) ->
  // 0: 16th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1072 & op=NO_OP) ->
  // 0: 17th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1073 & op=NO_OP) ->
  // 0: 18th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1074 & op=NO_OP) ->
  // 0: 19th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1075 & op=NO_OP) ->
  // 0: 20th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1076 & op=NO_OP) ->
  // 0: 21th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1077 & op=NO_OP) ->
  // 0: 22th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1078 & op=NO_OP) ->
  // 0: 23th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1079 & op=NO_OP) ->
  // 0: 24th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1080 & op=NO_OP) ->
  // 0: 25th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1081 & op=NO_OP) ->
  // 0: 26th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1082 & op=NO_OP) ->
  // 0: 27th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1083 & op=NO_OP) ->
  // 0: 28th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1084 & op=NO_OP) ->
  // 0: 29th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1085 & op=NO_OP) ->
  // 0: 30th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1086 & op=NO_OP) ->
  // 0: 31th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1087 & op=NO_OP) ->
  // 0: 32th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1088 & op=NO_OP) ->
  // 0: 33th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1089 & op=NO_OP) ->
  // 0: 34th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1090 & op=NO_OP) ->
  // 0: 35th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1091 & op=NO_OP) ->
  // 0: 36th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1092 & op=NO_OP) ->
  // 0: 37th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1093 & op=NO_OP) ->
  // 0: 38th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1094 & op=NO_OP) ->
  // 0: 39th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1095 & op=NO_OP) ->
  // 0: 40th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1096 & op=NO_OP) ->
  // 0: 41th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1097 & op=NO_OP) ->
  // 0: 42th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1098 & op=NO_OP) ->
  // 0: 43th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1099 & op=NO_OP) ->
  // 0: 44th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1100 & op=NO_OP) ->
  // 0: 45th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1101 & op=NO_OP) ->
  // 0: 46th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1102 & op=NO_OP) ->
  // 0: 47th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1103 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1104 & op=NO_OP) ->
  // 47: size of: ethernet.src - 1
  (op' = OP_CONST) &
  (x1' = 47)
  ;

[] (eip=1105 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1106 & op=NO_OP) ->
  // global address of target addr of field ethernet.src in packet_in
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1107 & op=NO_OP) ->
  // 48: size of: ethernet.src
  (op' = OP_CONST) &
  (x1' = 48)
  ;

[] (eip=1108 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1109 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1110 & op=NO_OP) ->
  // 48: size of: ethernet.src
  (op' = OP_POPN) &
  (x1' = 48)
  ;

// end of field ethernet.src (48)
// start of field ethernet.dst (48)
[] (eip=1111 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1112 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1113 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1114 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1115 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1116 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1117 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1118 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1119 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1120 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1121 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1122 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1123 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1124 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1125 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1126 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1127 & op=NO_OP) ->
  // 0: 16th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1128 & op=NO_OP) ->
  // 0: 17th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1129 & op=NO_OP) ->
  // 0: 18th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1130 & op=NO_OP) ->
  // 0: 19th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1131 & op=NO_OP) ->
  // 0: 20th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1132 & op=NO_OP) ->
  // 0: 21th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1133 & op=NO_OP) ->
  // 0: 22th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1134 & op=NO_OP) ->
  // 0: 23th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1135 & op=NO_OP) ->
  // 0: 24th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1136 & op=NO_OP) ->
  // 0: 25th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1137 & op=NO_OP) ->
  // 0: 26th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1138 & op=NO_OP) ->
  // 0: 27th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1139 & op=NO_OP) ->
  // 0: 28th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1140 & op=NO_OP) ->
  // 0: 29th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1141 & op=NO_OP) ->
  // 0: 30th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1142 & op=NO_OP) ->
  // 0: 31th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1143 & op=NO_OP) ->
  // 0: 32th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1144 & op=NO_OP) ->
  // 0: 33th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1145 & op=NO_OP) ->
  // 0: 34th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1146 & op=NO_OP) ->
  // 0: 35th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1147 & op=NO_OP) ->
  // 0: 36th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1148 & op=NO_OP) ->
  // 0: 37th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1149 & op=NO_OP) ->
  // 0: 38th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1150 & op=NO_OP) ->
  // 0: 39th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1151 & op=NO_OP) ->
  // 0: 40th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1152 & op=NO_OP) ->
  // 0: 41th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1153 & op=NO_OP) ->
  // 0: 42th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1154 & op=NO_OP) ->
  // 0: 43th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1155 & op=NO_OP) ->
  // 0: 44th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1156 & op=NO_OP) ->
  // 0: 45th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1157 & op=NO_OP) ->
  // 0: 46th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1158 & op=NO_OP) ->
  // 0: 47th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1159 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1160 & op=NO_OP) ->
  // 47: size of: ethernet.dst - 1
  (op' = OP_CONST) &
  (x1' = 47)
  ;

[] (eip=1161 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1162 & op=NO_OP) ->
  // global address of target addr of field ethernet.dst in packet_in
  (op' = OP_CONST) &
  (x1' = 49)
  ;

[] (eip=1163 & op=NO_OP) ->
  // 48: size of: ethernet.dst
  (op' = OP_CONST) &
  (x1' = 48)
  ;

[] (eip=1164 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1165 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1166 & op=NO_OP) ->
  // 48: size of: ethernet.dst
  (op' = OP_POPN) &
  (x1' = 48)
  ;

// end of field ethernet.dst (48)
// start of field ethernet.etherType (16)
[] (eip=1167 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1168 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1169 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1170 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1171 & op=NO_OP) ->
  // 1: 4th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1172 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1173 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1174 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1175 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1176 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1177 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1178 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1179 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1180 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1181 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1182 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1183 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1184 & op=NO_OP) ->
  // 15: size of: ethernet.etherType - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=1185 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1186 & op=NO_OP) ->
  // global address of target addr of field ethernet.etherType in packet_in
  (op' = OP_CONST) &
  (x1' = 97)
  ;

[] (eip=1187 & op=NO_OP) ->
  // 16: size of: ethernet.etherType
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1188 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1189 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1190 & op=NO_OP) ->
  // 16: size of: ethernet.etherType
  (op' = OP_POPN) &
  (x1' = 16)
  ;

// end of field ethernet.etherType (16)
// end of header ethernet
// start of header ipv4
// start of field ipv4.version (4)
[] (eip=1191 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1192 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1193 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1194 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1195 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1196 & op=NO_OP) ->
  // 3: size of: ipv4.version - 1
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=1197 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1198 & op=NO_OP) ->
  // global address of target addr of field ipv4.version in packet_in
  (op' = OP_CONST) &
  (x1' = 113)
  ;

[] (eip=1199 & op=NO_OP) ->
  // 4: size of: ipv4.version
  (op' = OP_CONST) &
  (x1' = 4)
  ;

[] (eip=1200 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1201 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1202 & op=NO_OP) ->
  // 4: size of: ipv4.version
  (op' = OP_POPN) &
  (x1' = 4)
  ;

// end of field ipv4.version (4)
// start of field ipv4.ihl (4)
[] (eip=1203 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1204 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1205 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1206 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1207 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1208 & op=NO_OP) ->
  // 3: size of: ipv4.ihl - 1
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=1209 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1210 & op=NO_OP) ->
  // global address of target addr of field ipv4.ihl in packet_in
  (op' = OP_CONST) &
  (x1' = 117)
  ;

[] (eip=1211 & op=NO_OP) ->
  // 4: size of: ipv4.ihl
  (op' = OP_CONST) &
  (x1' = 4)
  ;

[] (eip=1212 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1213 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1214 & op=NO_OP) ->
  // 4: size of: ipv4.ihl
  (op' = OP_POPN) &
  (x1' = 4)
  ;

// end of field ipv4.ihl (4)
// start of field ipv4.diffserv (8)
[] (eip=1215 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1216 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1217 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1218 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1219 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1220 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1221 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1222 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1223 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1224 & op=NO_OP) ->
  // 7: size of: ipv4.diffserv - 1
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=1225 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1226 & op=NO_OP) ->
  // global address of target addr of field ipv4.diffserv in packet_in
  (op' = OP_CONST) &
  (x1' = 121)
  ;

[] (eip=1227 & op=NO_OP) ->
  // 8: size of: ipv4.diffserv
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=1228 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1229 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1230 & op=NO_OP) ->
  // 8: size of: ipv4.diffserv
  (op' = OP_POPN) &
  (x1' = 8)
  ;

// end of field ipv4.diffserv (8)
// start of field ipv4.totalLen (16)
[] (eip=1231 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1232 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1233 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1234 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1235 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1236 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1237 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1238 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1239 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1240 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1241 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1242 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1243 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1244 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1245 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1246 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1247 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1248 & op=NO_OP) ->
  // 15: size of: ipv4.totalLen - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=1249 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1250 & op=NO_OP) ->
  // global address of target addr of field ipv4.totalLen in packet_in
  (op' = OP_CONST) &
  (x1' = 129)
  ;

[] (eip=1251 & op=NO_OP) ->
  // 16: size of: ipv4.totalLen
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1252 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1253 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1254 & op=NO_OP) ->
  // 16: size of: ipv4.totalLen
  (op' = OP_POPN) &
  (x1' = 16)
  ;

// end of field ipv4.totalLen (16)
// start of field ipv4.identification (16)
[] (eip=1255 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1256 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1257 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1258 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1259 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1260 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1261 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1262 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1263 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1264 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1265 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1266 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1267 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1268 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1269 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1270 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1271 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1272 & op=NO_OP) ->
  // 15: size of: ipv4.identification - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=1273 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1274 & op=NO_OP) ->
  // global address of target addr of field ipv4.identification in packet_in
  (op' = OP_CONST) &
  (x1' = 145)
  ;

[] (eip=1275 & op=NO_OP) ->
  // 16: size of: ipv4.identification
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1276 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1277 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1278 & op=NO_OP) ->
  // 16: size of: ipv4.identification
  (op' = OP_POPN) &
  (x1' = 16)
  ;

// end of field ipv4.identification (16)
// start of field ipv4.flags (3)
[] (eip=1279 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1280 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1281 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1282 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1283 & op=NO_OP) ->
  // 2: size of: ipv4.flags - 1
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=1284 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1285 & op=NO_OP) ->
  // global address of target addr of field ipv4.flags in packet_in
  (op' = OP_CONST) &
  (x1' = 161)
  ;

[] (eip=1286 & op=NO_OP) ->
  // 3: size of: ipv4.flags
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=1287 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1288 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1289 & op=NO_OP) ->
  // 3: size of: ipv4.flags
  (op' = OP_POPN) &
  (x1' = 3)
  ;

// end of field ipv4.flags (3)
// start of field ipv4.fragOffset (13)
[] (eip=1290 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1291 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1292 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1293 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1294 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1295 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1296 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1297 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1298 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1299 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1300 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1301 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1302 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1303 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1304 & op=NO_OP) ->
  // 12: size of: ipv4.fragOffset - 1
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=1305 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1306 & op=NO_OP) ->
  // global address of target addr of field ipv4.fragOffset in packet_in
  (op' = OP_CONST) &
  (x1' = 164)
  ;

[] (eip=1307 & op=NO_OP) ->
  // 13: size of: ipv4.fragOffset
  (op' = OP_CONST) &
  (x1' = 13)
  ;

[] (eip=1308 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1309 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1310 & op=NO_OP) ->
  // 13: size of: ipv4.fragOffset
  (op' = OP_POPN) &
  (x1' = 13)
  ;

// end of field ipv4.fragOffset (13)
// start of field ipv4.ttl (8)
[] (eip=1311 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1312 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1313 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1314 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1315 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1316 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1317 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1318 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1319 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1320 & op=NO_OP) ->
  // 7: size of: ipv4.ttl - 1
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=1321 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1322 & op=NO_OP) ->
  // global address of target addr of field ipv4.ttl in packet_in
  (op' = OP_CONST) &
  (x1' = 177)
  ;

[] (eip=1323 & op=NO_OP) ->
  // 8: size of: ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=1324 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1325 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1326 & op=NO_OP) ->
  // 8: size of: ipv4.ttl
  (op' = OP_POPN) &
  (x1' = 8)
  ;

// end of field ipv4.ttl (8)
// start of field ipv4.protocol (8)
[] (eip=1327 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1328 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1329 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1330 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1331 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1332 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1333 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1334 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1335 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1336 & op=NO_OP) ->
  // 7: size of: ipv4.protocol - 1
  (op' = OP_CONST) &
  (x1' = 7)
  ;

[] (eip=1337 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1338 & op=NO_OP) ->
  // global address of target addr of field ipv4.protocol in packet_in
  (op' = OP_CONST) &
  (x1' = 185)
  ;

[] (eip=1339 & op=NO_OP) ->
  // 8: size of: ipv4.protocol
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=1340 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1341 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1342 & op=NO_OP) ->
  // 8: size of: ipv4.protocol
  (op' = OP_POPN) &
  (x1' = 8)
  ;

// end of field ipv4.protocol (8)
// start of field ipv4.hdrChecksum (16)
[] (eip=1343 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1344 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1345 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1346 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1347 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1348 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1349 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1350 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1351 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1352 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1353 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1354 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1355 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1356 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1357 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1358 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1359 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1360 & op=NO_OP) ->
  // 15: size of: ipv4.hdrChecksum - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=1361 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1362 & op=NO_OP) ->
  // global address of target addr of field ipv4.hdrChecksum in packet_in
  (op' = OP_CONST) &
  (x1' = 193)
  ;

[] (eip=1363 & op=NO_OP) ->
  // 16: size of: ipv4.hdrChecksum
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1364 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1365 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1366 & op=NO_OP) ->
  // 16: size of: ipv4.hdrChecksum
  (op' = OP_POPN) &
  (x1' = 16)
  ;

// end of field ipv4.hdrChecksum (16)
// start of field ipv4.srcAddr (32)
[] (eip=1367 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1368 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1369 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1370 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1371 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1372 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1373 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1374 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1375 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1376 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1377 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1378 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1379 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1380 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1381 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1382 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1383 & op=NO_OP) ->
  // 0: 16th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1384 & op=NO_OP) ->
  // 0: 17th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1385 & op=NO_OP) ->
  // 0: 18th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1386 & op=NO_OP) ->
  // 0: 19th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1387 & op=NO_OP) ->
  // 0: 20th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1388 & op=NO_OP) ->
  // 0: 21th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1389 & op=NO_OP) ->
  // 0: 22th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1390 & op=NO_OP) ->
  // 0: 23th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1391 & op=NO_OP) ->
  // 0: 24th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1392 & op=NO_OP) ->
  // 0: 25th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1393 & op=NO_OP) ->
  // 0: 26th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1394 & op=NO_OP) ->
  // 0: 27th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1395 & op=NO_OP) ->
  // 0: 28th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1396 & op=NO_OP) ->
  // 0: 29th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1397 & op=NO_OP) ->
  // 0: 30th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1398 & op=NO_OP) ->
  // 0: 31th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1399 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1400 & op=NO_OP) ->
  // 31: size of: ipv4.srcAddr - 1
  (op' = OP_CONST) &
  (x1' = 31)
  ;

[] (eip=1401 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1402 & op=NO_OP) ->
  // global address of target addr of field ipv4.srcAddr in packet_in
  (op' = OP_CONST) &
  (x1' = 209)
  ;

[] (eip=1403 & op=NO_OP) ->
  // 32: size of: ipv4.srcAddr
  (op' = OP_CONST) &
  (x1' = 32)
  ;

[] (eip=1404 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1405 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1406 & op=NO_OP) ->
  // 32: size of: ipv4.srcAddr
  (op' = OP_POPN) &
  (x1' = 32)
  ;

// end of field ipv4.srcAddr (32)
// start of field ipv4.dstAddr (32)
[] (eip=1407 & op=NO_OP) ->
  // 1: 0th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1408 & op=NO_OP) ->
  // 1: 1th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1409 & op=NO_OP) ->
  // 1: 2th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1410 & op=NO_OP) ->
  // 1: 3th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1411 & op=NO_OP) ->
  // 1: 4th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1412 & op=NO_OP) ->
  // 1: 5th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1413 & op=NO_OP) ->
  // 1: 6th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1414 & op=NO_OP) ->
  // 1: 7th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1415 & op=NO_OP) ->
  // 1: 8th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1416 & op=NO_OP) ->
  // 1: 9th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1417 & op=NO_OP) ->
  // 1: 10th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1418 & op=NO_OP) ->
  // 1: 11th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1419 & op=NO_OP) ->
  // 1: 12th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1420 & op=NO_OP) ->
  // 1: 13th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1421 & op=NO_OP) ->
  // 1: 14th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1422 & op=NO_OP) ->
  // 1: 15th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1423 & op=NO_OP) ->
  // 1: 16th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1424 & op=NO_OP) ->
  // 1: 17th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1425 & op=NO_OP) ->
  // 1: 18th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1426 & op=NO_OP) ->
  // 1: 19th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1427 & op=NO_OP) ->
  // 1: 20th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1428 & op=NO_OP) ->
  // 1: 21th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1429 & op=NO_OP) ->
  // 1: 22th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1430 & op=NO_OP) ->
  // 1: 23th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1431 & op=NO_OP) ->
  // 1: 24th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1432 & op=NO_OP) ->
  // 1: 25th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1433 & op=NO_OP) ->
  // 1: 26th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1434 & op=NO_OP) ->
  // 1: 27th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1435 & op=NO_OP) ->
  // 1: 28th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1436 & op=NO_OP) ->
  // 1: 29th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1437 & op=NO_OP) ->
  // 1: 30th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1438 & op=NO_OP) ->
  // 1: 31th bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1439 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1440 & op=NO_OP) ->
  // 31: size of: ipv4.dstAddr - 1
  (op' = OP_CONST) &
  (x1' = 31)
  ;

[] (eip=1441 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1442 & op=NO_OP) ->
  // global address of target addr of field ipv4.dstAddr in packet_in
  (op' = OP_CONST) &
  (x1' = 241)
  ;

[] (eip=1443 & op=NO_OP) ->
  // 32: size of: ipv4.dstAddr
  (op' = OP_CONST) &
  (x1' = 32)
  ;

[] (eip=1444 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1445 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1446 & op=NO_OP) ->
  // 32: size of: ipv4.dstAddr
  (op' = OP_POPN) &
  (x1' = 32)
  ;

// end of field ipv4.dstAddr (32)
// end of header ipv4
[] (eip=1447 & op=NO_OP) ->
  // 1585: label to packet received, go to junction
  (op' = OP_GOTO) &
  (x1' = 1585)
  ;

// start of header ethernet
// start of field ethernet.src (48)
[] (eip=1448 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1449 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1450 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1451 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1452 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1453 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1454 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1455 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1456 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1457 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1458 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1459 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1460 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1461 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1462 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1463 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1464 & op=NO_OP) ->
  // 0: 16th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1465 & op=NO_OP) ->
  // 0: 17th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1466 & op=NO_OP) ->
  // 0: 18th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1467 & op=NO_OP) ->
  // 0: 19th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1468 & op=NO_OP) ->
  // 0: 20th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1469 & op=NO_OP) ->
  // 0: 21th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1470 & op=NO_OP) ->
  // 0: 22th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1471 & op=NO_OP) ->
  // 0: 23th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1472 & op=NO_OP) ->
  // 0: 24th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1473 & op=NO_OP) ->
  // 0: 25th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1474 & op=NO_OP) ->
  // 0: 26th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1475 & op=NO_OP) ->
  // 0: 27th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1476 & op=NO_OP) ->
  // 0: 28th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1477 & op=NO_OP) ->
  // 0: 29th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1478 & op=NO_OP) ->
  // 0: 30th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1479 & op=NO_OP) ->
  // 0: 31th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1480 & op=NO_OP) ->
  // 0: 32th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1481 & op=NO_OP) ->
  // 0: 33th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1482 & op=NO_OP) ->
  // 0: 34th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1483 & op=NO_OP) ->
  // 0: 35th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1484 & op=NO_OP) ->
  // 0: 36th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1485 & op=NO_OP) ->
  // 0: 37th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1486 & op=NO_OP) ->
  // 0: 38th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1487 & op=NO_OP) ->
  // 0: 39th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1488 & op=NO_OP) ->
  // 0: 40th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1489 & op=NO_OP) ->
  // 0: 41th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1490 & op=NO_OP) ->
  // 0: 42th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1491 & op=NO_OP) ->
  // 0: 43th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1492 & op=NO_OP) ->
  // 0: 44th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1493 & op=NO_OP) ->
  // 0: 45th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1494 & op=NO_OP) ->
  // 0: 46th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1495 & op=NO_OP) ->
  // 0: 47th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1496 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1497 & op=NO_OP) ->
  // 47: size of: ethernet.src - 1
  (op' = OP_CONST) &
  (x1' = 47)
  ;

[] (eip=1498 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1499 & op=NO_OP) ->
  // global address of target addr of field ethernet.src in packet_in
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1500 & op=NO_OP) ->
  // 48: size of: ethernet.src
  (op' = OP_CONST) &
  (x1' = 48)
  ;

[] (eip=1501 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1502 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1503 & op=NO_OP) ->
  // 48: size of: ethernet.src
  (op' = OP_POPN) &
  (x1' = 48)
  ;

// end of field ethernet.src (48)
// start of field ethernet.dst (48)
[] (eip=1504 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1505 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1506 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1507 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1508 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1509 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1510 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1511 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1512 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1513 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1514 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1515 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1516 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1517 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1518 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1519 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1520 & op=NO_OP) ->
  // 0: 16th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1521 & op=NO_OP) ->
  // 0: 17th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1522 & op=NO_OP) ->
  // 0: 18th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1523 & op=NO_OP) ->
  // 0: 19th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1524 & op=NO_OP) ->
  // 0: 20th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1525 & op=NO_OP) ->
  // 0: 21th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1526 & op=NO_OP) ->
  // 0: 22th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1527 & op=NO_OP) ->
  // 0: 23th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1528 & op=NO_OP) ->
  // 0: 24th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1529 & op=NO_OP) ->
  // 0: 25th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1530 & op=NO_OP) ->
  // 0: 26th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1531 & op=NO_OP) ->
  // 0: 27th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1532 & op=NO_OP) ->
  // 0: 28th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1533 & op=NO_OP) ->
  // 0: 29th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1534 & op=NO_OP) ->
  // 0: 30th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1535 & op=NO_OP) ->
  // 0: 31th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1536 & op=NO_OP) ->
  // 0: 32th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1537 & op=NO_OP) ->
  // 0: 33th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1538 & op=NO_OP) ->
  // 0: 34th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1539 & op=NO_OP) ->
  // 0: 35th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1540 & op=NO_OP) ->
  // 0: 36th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1541 & op=NO_OP) ->
  // 0: 37th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1542 & op=NO_OP) ->
  // 0: 38th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1543 & op=NO_OP) ->
  // 0: 39th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1544 & op=NO_OP) ->
  // 0: 40th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1545 & op=NO_OP) ->
  // 0: 41th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1546 & op=NO_OP) ->
  // 0: 42th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1547 & op=NO_OP) ->
  // 0: 43th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1548 & op=NO_OP) ->
  // 0: 44th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1549 & op=NO_OP) ->
  // 0: 45th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1550 & op=NO_OP) ->
  // 0: 46th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1551 & op=NO_OP) ->
  // 0: 47th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1552 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1553 & op=NO_OP) ->
  // 47: size of: ethernet.dst - 1
  (op' = OP_CONST) &
  (x1' = 47)
  ;

[] (eip=1554 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1555 & op=NO_OP) ->
  // global address of target addr of field ethernet.dst in packet_in
  (op' = OP_CONST) &
  (x1' = 49)
  ;

[] (eip=1556 & op=NO_OP) ->
  // 48: size of: ethernet.dst
  (op' = OP_CONST) &
  (x1' = 48)
  ;

[] (eip=1557 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1558 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1559 & op=NO_OP) ->
  // 48: size of: ethernet.dst
  (op' = OP_POPN) &
  (x1' = 48)
  ;

// end of field ethernet.dst (48)
// start of field ethernet.etherType (16)
[] (eip=1560 & op=NO_OP) ->
  // 0: 0th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1561 & op=NO_OP) ->
  // 0: 1th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1562 & op=NO_OP) ->
  // 0: 2th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1563 & op=NO_OP) ->
  // 0: 3th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1564 & op=NO_OP) ->
  // 0: 4th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1565 & op=NO_OP) ->
  // 0: 5th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1566 & op=NO_OP) ->
  // 0: 6th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1567 & op=NO_OP) ->
  // 0: 7th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1568 & op=NO_OP) ->
  // 0: 8th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1569 & op=NO_OP) ->
  // 0: 9th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1570 & op=NO_OP) ->
  // 0: 10th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1571 & op=NO_OP) ->
  // 0: 11th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1572 & op=NO_OP) ->
  // 0: 12th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1573 & op=NO_OP) ->
  // 0: 13th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1574 & op=NO_OP) ->
  // 0: 14th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1575 & op=NO_OP) ->
  // 0: 15th bit
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1576 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1577 & op=NO_OP) ->
  // 15: size of: ethernet.etherType - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=1578 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1579 & op=NO_OP) ->
  // global address of target addr of field ethernet.etherType in packet_in
  (op' = OP_CONST) &
  (x1' = 97)
  ;

[] (eip=1580 & op=NO_OP) ->
  // 16: size of: ethernet.etherType
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1581 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1582 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1583 & op=NO_OP) ->
  // 16: size of: ethernet.etherType
  (op' = OP_POPN) &
  (x1' = 16)
  ;

// end of field ethernet.etherType (16)
// end of header ethernet
[] (eip=1584 & op=NO_OP) ->
  // 1585: label to packet received, go to junction
  (op' = OP_GOTO) &
  (x1' = 1585)
  ;

[] (eip=1585 & op=NO_OP) ->
  // 0: receive_packet terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1586 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

//  
// end of definition of receive_packet()
//

// definition of fill_tables()
// Filling table rewrite_mac
// Filling table bd
// bd / Entry 0
// bd / Entry 0 / Key meta.ingress_metadata.bd
[] (eip=1587 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1588 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1589 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1590 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1591 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1592 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1593 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1594 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1595 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1596 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1597 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1598 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1599 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1600 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1601 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1602 & op=NO_OP) ->
  // 1: 
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1603 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1604 & op=NO_OP) ->
  // 15: size of: bd.ENTRY[0,0]  - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=1605 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1606 & op=NO_OP) ->
  // global address of bd.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1089)
  ;

[] (eip=1607 & op=NO_OP) ->
  // 16: size of: bd.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1608 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

// Filling table ipv4_fib
// ipv4_fib / Entry 0
// ipv4_fib / Entry 0 / Key hdr.ipv4.dstAddr
[] (eip=1609 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1610 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1611 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1612 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1613 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1614 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1615 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1616 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1617 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1618 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1619 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1620 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1621 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1622 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1623 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1624 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1625 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1626 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1627 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1628 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1629 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1630 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1631 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1632 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1633 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1634 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1635 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1636 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1637 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1638 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1639 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1640 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1641 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1642 & op=NO_OP) ->
  // 31: size of: ipv4_fib.ENTRY[0,0]  - 1
  (op' = OP_CONST) &
  (x1' = 31)
  ;

[] (eip=1643 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1644 & op=NO_OP) ->
  // global address of ipv4_fib.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1106)
  ;

[] (eip=1645 & op=NO_OP) ->
  // 32: size of: ipv4_fib.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 32)
  ;

[] (eip=1646 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

// ipv4_fib / Entry 0 / Key meta.ingress_metadata.vrf
[] (eip=1647 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1648 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1649 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1650 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1651 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1652 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1653 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1654 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1655 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1656 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1657 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1658 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1659 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1660 & op=NO_OP) ->
  // 11: size of: ipv4_fib.ENTRY[0,1]  - 1
  (op' = OP_CONST) &
  (x1' = 11)
  ;

[] (eip=1661 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1662 & op=NO_OP) ->
  // global address of ipv4_fib.ENTRY[0,1]
  (op' = OP_CONST) &
  (x1' = 1138)
  ;

[] (eip=1663 & op=NO_OP) ->
  // 12: size of: ipv4_fib.ENTRY[0,1]
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=1664 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

// Filling table ipv4_fib_lpm
// ipv4_fib_lpm / Entry 0
// ipv4_fib_lpm / Entry 0 / Key hdr.ipv4.dstAddr
[] (eip=1665 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1666 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1667 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1668 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1669 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1670 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1671 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1672 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1673 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1674 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1675 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1676 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1677 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1678 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1679 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1680 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1681 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1682 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1683 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1684 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1685 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1686 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1687 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1688 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1689 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1690 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1691 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1692 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1693 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1694 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1695 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1696 & op=NO_OP) ->
  // 1: 
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1697 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1698 & op=NO_OP) ->
  // 31: size of: ipv4_fib_lpm.ENTRY[0,0]  - 1
  (op' = OP_CONST) &
  (x1' = 31)
  ;

[] (eip=1699 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1700 & op=NO_OP) ->
  // global address of ipv4_fib_lpm.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1151)
  ;

[] (eip=1701 & op=NO_OP) ->
  // 32: size of: ipv4_fib_lpm.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 32)
  ;

[] (eip=1702 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

// ipv4_fib_lpm / Entry 0 / Key meta.ingress_metadata.vrf
[] (eip=1703 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1704 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1705 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1706 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1707 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1708 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1709 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1710 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1711 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1712 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1713 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1714 & op=NO_OP) ->
  // 1: 
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1715 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1716 & op=NO_OP) ->
  // 11: size of: ipv4_fib_lpm.ENTRY[0,1]  - 1
  (op' = OP_CONST) &
  (x1' = 11)
  ;

[] (eip=1717 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1718 & op=NO_OP) ->
  // global address of ipv4_fib_lpm.ENTRY[0,1]
  (op' = OP_CONST) &
  (x1' = 1183)
  ;

[] (eip=1719 & op=NO_OP) ->
  // 12: size of: ipv4_fib_lpm.ENTRY[0,1]
  (op' = OP_CONST) &
  (x1' = 12)
  ;

[] (eip=1720 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

// Filling table nexthop
// nexthop / Entry 0
// nexthop / Entry 0 / Key meta.ingress_metadata.nexthop_index
[] (eip=1721 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1722 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1723 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1724 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1725 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1726 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1727 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1728 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1729 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1730 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1731 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1732 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1733 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1734 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1735 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1736 & op=NO_OP) ->
  // 1: 
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1737 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1738 & op=NO_OP) ->
  // 15: size of: nexthop.ENTRY[0,0]  - 1
  (op' = OP_CONST) &
  (x1' = 15)
  ;

[] (eip=1739 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1740 & op=NO_OP) ->
  // global address of nexthop.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1196)
  ;

[] (eip=1741 & op=NO_OP) ->
  // 16: size of: nexthop.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1742 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

// Filling table port_mapping
// port_mapping / Entry 0
// port_mapping / Entry 0 / Key standard_metadata.ingress_port
[] (eip=1743 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1744 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1745 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1746 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1747 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1748 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1749 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1750 & op=NO_OP) ->
  // 0: 
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1751 & op=NO_OP) ->
  // 1: 
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1752 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1753 & op=NO_OP) ->
  // 8: size of: port_mapping.ENTRY[0,0]  - 1
  (op' = OP_CONST) &
  (x1' = 8)
  ;

[] (eip=1754 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1755 & op=NO_OP) ->
  // global address of port_mapping.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 1213)
  ;

[] (eip=1756 & op=NO_OP) ->
  // 9: size of: port_mapping.ENTRY[0,0]
  (op' = OP_CONST) &
  (x1' = 9)
  ;

[] (eip=1757 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1758 & op=NO_OP) ->
  // 0: fill_tables terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1759 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

//  
// end of definition of fill_tables()
//

// definition of memcmp()
[] (eip=1760 & op=NO_OP) ->
  // 2: local address of length
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=1761 & op=NO_OP) ->
  (op' = OP_TOP)
  ;

[] (eip=1762 & op=NO_OP) ->
  // 1780: label to jump if length is 0
  (op' = OP_IFEQ) &
  (x1' = 1780)
  ;

[] (eip=1763 & op=NO_OP) ->
  // 0: local address of src
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=1764 & op=NO_OP) ->
  (op' = OP_TOP)
  ;

[] (eip=1765 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1766 & op=NO_OP) ->
  // 0: local address of src
  (op' = OP_STORE) &
  (x1' = 0)
  ;

[] (eip=1767 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=1768 & op=NO_OP) ->
  // 1: local address of dst
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=1769 & op=NO_OP) ->
  (op' = OP_TOP)
  ;

[] (eip=1770 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1771 & op=NO_OP) ->
  // 1: local address of dst
  (op' = OP_STORE) &
  (x1' = 1)
  ;

[] (eip=1772 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=1773 & op=NO_OP) ->
  (op' = OP_EQ)
  ;

[] (eip=1774 & op=NO_OP) ->
  // 1777: label to jump if not equal
  (op' = OP_IFEQ) &
  (x1' = 1777)
  ;

[] (eip=1775 & op=NO_OP) ->
  (op' = OP_DEC)
  ;

[] (eip=1776 & op=NO_OP) ->
  // 1761: label to loop
  (op' = OP_GOTO) &
  (x1' = 1761)
  ;

[] (eip=1777 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1778 & op=NO_OP) ->
  // 0: fail
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1779 & op=NO_OP) ->
  // 1782: label to return
  (op' = OP_GOTO) &
  (x1' = 1782)
  ;

[] (eip=1780 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1781 & op=NO_OP) ->
  // 1: success
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1782 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of memcmp()
//

// definition of memcpy()
[] (eip=1783 & op=NO_OP) ->
  // 2: local address of length
  (op' = OP_LOAD) &
  (x1' = 2)
  ;

[] (eip=1784 & op=NO_OP) ->
  (op' = OP_TOP)
  ;

[] (eip=1785 & op=NO_OP) ->
  // 1798: label to jump if length is 0
  (op' = OP_IFEQ) &
  (x1' = 1798)
  ;

[] (eip=1786 & op=NO_OP) ->
  // 0: local address of src
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=1787 & op=NO_OP) ->
  (op' = OP_TOP)
  ;

[] (eip=1788 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1789 & op=NO_OP) ->
  // 0: local address of src
  (op' = OP_STORE) &
  (x1' = 0)
  ;

[] (eip=1790 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=1791 & op=NO_OP) ->
  // 1: local address of dst
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=1792 & op=NO_OP) ->
  (op' = OP_TOP)
  ;

[] (eip=1793 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1794 & op=NO_OP) ->
  // 1: local address of dst
  (op' = OP_STORE) &
  (x1' = 1)
  ;

[] (eip=1795 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=1796 & op=NO_OP) ->
  (op' = OP_DEC)
  ;

[] (eip=1797 & op=NO_OP) ->
  // 1784: label to loop
  (op' = OP_GOTO) &
  (x1' = 1784)
  ;

[] (eip=1798 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=1799 & op=NO_OP) ->
  // 0: memcpy terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1800 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

//  
// end of definition of memcpy()
//

// definition of subtract()
// TODO
[] (eip=1801 & op=NO_OP) ->
  // 0: subtract terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=1802 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of subtract()
//

// definition of main()
// ParserImpl(packet_in, {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}, {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority})
[] (eip=1803 & op=NO_OP) ->
  // global address of packet_in
  (op' = OP_CONST) &
  (x1' = 0)
  ;

// {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
[] (eip=1804 & op=NO_OP) ->
  // global address of headers.ethernet.valid
  (op' = OP_CONST) &
  (x1' = 719)
  ;

[] (eip=1805 & op=NO_OP) ->
  // global address of headers.ethernet.size
  (op' = OP_CONST) &
  (x1' = 720)
  ;

[] (eip=1806 & op=NO_OP) ->
  // global address of headers.ethernet.srcAddr
  (op' = OP_CONST) &
  (x1' = 721)
  ;

[] (eip=1807 & op=NO_OP) ->
  // global address of headers.ethernet.dstAddr
  (op' = OP_CONST) &
  (x1' = 769)
  ;

[] (eip=1808 & op=NO_OP) ->
  // global address of headers.ethernet.etherType
  (op' = OP_CONST) &
  (x1' = 817)
  ;

// memcpy(src,dst,length)
[] (eip=1809 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1810 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=1811 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1812 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1813 & op=NO_OP) ->
  // global address of main.temp0_LIST_5
  (op' = OP_CONST) &
  (x1' = 1356)
  ;

[] (eip=1814 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=1815 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1816 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1817 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_POPN) &
  (x1' = 5)
  ;

[] (eip=1818 & op=NO_OP) ->
  // global address of main.temp0_LIST_5
  (op' = OP_CONST) &
  (x1' = 1356)
  ;

// end of {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
// {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
[] (eip=1819 & op=NO_OP) ->
  // global address of headers.ipv4.valid
  (op' = OP_CONST) &
  (x1' = 833)
  ;

[] (eip=1820 & op=NO_OP) ->
  // global address of headers.ipv4.size
  (op' = OP_CONST) &
  (x1' = 834)
  ;

[] (eip=1821 & op=NO_OP) ->
  // global address of headers.ipv4.version
  (op' = OP_CONST) &
  (x1' = 835)
  ;

[] (eip=1822 & op=NO_OP) ->
  // global address of headers.ipv4.ihl
  (op' = OP_CONST) &
  (x1' = 839)
  ;

[] (eip=1823 & op=NO_OP) ->
  // global address of headers.ipv4.diffserv
  (op' = OP_CONST) &
  (x1' = 843)
  ;

[] (eip=1824 & op=NO_OP) ->
  // global address of headers.ipv4.totalLen
  (op' = OP_CONST) &
  (x1' = 851)
  ;

[] (eip=1825 & op=NO_OP) ->
  // global address of headers.ipv4.identification
  (op' = OP_CONST) &
  (x1' = 867)
  ;

[] (eip=1826 & op=NO_OP) ->
  // global address of headers.ipv4.flags
  (op' = OP_CONST) &
  (x1' = 883)
  ;

[] (eip=1827 & op=NO_OP) ->
  // global address of headers.ipv4.fragOffset
  (op' = OP_CONST) &
  (x1' = 886)
  ;

[] (eip=1828 & op=NO_OP) ->
  // global address of headers.ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 899)
  ;

[] (eip=1829 & op=NO_OP) ->
  // global address of headers.ipv4.protocol
  (op' = OP_CONST) &
  (x1' = 907)
  ;

[] (eip=1830 & op=NO_OP) ->
  // global address of headers.ipv4.hdrChecksum
  (op' = OP_CONST) &
  (x1' = 915)
  ;

[] (eip=1831 & op=NO_OP) ->
  // global address of headers.ipv4.srcAddr
  (op' = OP_CONST) &
  (x1' = 931)
  ;

[] (eip=1832 & op=NO_OP) ->
  // global address of headers.ipv4.dstAddr
  (op' = OP_CONST) &
  (x1' = 963)
  ;

// memcpy(src,dst,length)
[] (eip=1833 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1834 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=1835 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1836 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1837 & op=NO_OP) ->
  // global address of main.temp1_LIST_14
  (op' = OP_CONST) &
  (x1' = 1361)
  ;

[] (eip=1838 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=1839 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1840 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1841 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_POPN) &
  (x1' = 14)
  ;

[] (eip=1842 & op=NO_OP) ->
  // global address of main.temp1_LIST_14
  (op' = OP_CONST) &
  (x1' = 1361)
  ;

// end of {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
// memcpy(src,dst,length)
[] (eip=1843 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1844 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=1845 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1846 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1847 & op=NO_OP) ->
  // global address of main.temp2_LIST_2
  (op' = OP_CONST) &
  (x1' = 1375)
  ;

[] (eip=1848 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=1849 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1850 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1851 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_POPN) &
  (x1' = 2)
  ;

[] (eip=1852 & op=NO_OP) ->
  // global address of main.temp2_LIST_2
  (op' = OP_CONST) &
  (x1' = 1375)
  ;

// end of {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
// {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
[] (eip=1853 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.vrf
  (op' = OP_CONST) &
  (x1' = 675)
  ;

[] (eip=1854 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.bd
  (op' = OP_CONST) &
  (x1' = 687)
  ;

[] (eip=1855 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.nexthop_index
  (op' = OP_CONST) &
  (x1' = 703)
  ;

// memcpy(src,dst,length)
[] (eip=1856 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1857 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=1858 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1859 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1860 & op=NO_OP) ->
  // global address of main.temp3_LIST_3
  (op' = OP_CONST) &
  (x1' = 1377)
  ;

[] (eip=1861 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=1862 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1863 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1864 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_POPN) &
  (x1' = 3)
  ;

[] (eip=1865 & op=NO_OP) ->
  // global address of main.temp3_LIST_3
  (op' = OP_CONST) &
  (x1' = 1377)
  ;

// end of {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
// memcpy(src,dst,length)
[] (eip=1866 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1867 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1868 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1869 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1870 & op=NO_OP) ->
  // global address of main.temp4_LIST_1
  (op' = OP_CONST) &
  (x1' = 1380)
  ;

[] (eip=1871 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1872 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1873 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1874 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_POPN) &
  (x1' = 1)
  ;

[] (eip=1875 & op=NO_OP) ->
  // global address of main.temp4_LIST_1
  (op' = OP_CONST) &
  (x1' = 1380)
  ;

// end of {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
// {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority}
[] (eip=1876 & op=NO_OP) ->
  // global address of standard_metadata_t.ingress_port
  (op' = OP_CONST) &
  (x1' = 305)
  ;

[] (eip=1877 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_spec
  (op' = OP_CONST) &
  (x1' = 314)
  ;

[] (eip=1878 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_port
  (op' = OP_CONST) &
  (x1' = 323)
  ;

[] (eip=1879 & op=NO_OP) ->
  // global address of standard_metadata_t.instance_type
  (op' = OP_CONST) &
  (x1' = 332)
  ;

[] (eip=1880 & op=NO_OP) ->
  // global address of standard_metadata_t.packet_length
  (op' = OP_CONST) &
  (x1' = 364)
  ;

[] (eip=1881 & op=NO_OP) ->
  // global address of standard_metadata_t.enq_timestamp
  (op' = OP_CONST) &
  (x1' = 396)
  ;

[] (eip=1882 & op=NO_OP) ->
  // global address of standard_metadata_t.enq_qdepth
  (op' = OP_CONST) &
  (x1' = 428)
  ;

[] (eip=1883 & op=NO_OP) ->
  // global address of standard_metadata_t.deq_timedelta
  (op' = OP_CONST) &
  (x1' = 447)
  ;

[] (eip=1884 & op=NO_OP) ->
  // global address of standard_metadata_t.deq_qdepth
  (op' = OP_CONST) &
  (x1' = 479)
  ;

[] (eip=1885 & op=NO_OP) ->
  // global address of standard_metadata_t.ingress_global_timestamp
  (op' = OP_CONST) &
  (x1' = 498)
  ;

[] (eip=1886 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_global_timestamp
  (op' = OP_CONST) &
  (x1' = 546)
  ;

[] (eip=1887 & op=NO_OP) ->
  // global address of standard_metadata_t.mcast_grp
  (op' = OP_CONST) &
  (x1' = 594)
  ;

[] (eip=1888 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_rid
  (op' = OP_CONST) &
  (x1' = 610)
  ;

[] (eip=1889 & op=NO_OP) ->
  // global address of standard_metadata_t.checksum_error
  (op' = OP_CONST) &
  (x1' = 626)
  ;

[] (eip=1890 & op=NO_OP) ->
  // global address of standard_metadata_t.parser_error
  (op' = OP_CONST) &
  (x1' = 627)
  ;

[] (eip=1891 & op=NO_OP) ->
  // global address of standard_metadata_t.priority
  (op' = OP_CONST) &
  (x1' = 628)
  ;

// memcpy(src,dst,length)
[] (eip=1892 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1893 & op=NO_OP) ->
  // 16: size of: list
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1894 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1895 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1896 & op=NO_OP) ->
  // global address of main.temp5_LIST_16
  (op' = OP_CONST) &
  (x1' = 1381)
  ;

[] (eip=1897 & op=NO_OP) ->
  // 16: size of: list
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1898 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1899 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1900 & op=NO_OP) ->
  // 16: size of: list
  (op' = OP_POPN) &
  (x1' = 16)
  ;

[] (eip=1901 & op=NO_OP) ->
  // global address of main.temp5_LIST_16
  (op' = OP_CONST) &
  (x1' = 1381)
  ;

// end of {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority}
[] (eip=1902 & op=NO_OP) ->
  // 239: label to ::ParserImpl, 4: size of: packet_in, {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}, {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority}
  (op' = OP_INVOKE) &
  (x4' = 239) &
  (x5' = 4)
  ;

[] (eip=1903 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// ingress({{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}, {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority})
// {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
[] (eip=1904 & op=NO_OP) ->
  // global address of headers.ethernet.valid
  (op' = OP_CONST) &
  (x1' = 719)
  ;

[] (eip=1905 & op=NO_OP) ->
  // global address of headers.ethernet.size
  (op' = OP_CONST) &
  (x1' = 720)
  ;

[] (eip=1906 & op=NO_OP) ->
  // global address of headers.ethernet.srcAddr
  (op' = OP_CONST) &
  (x1' = 721)
  ;

[] (eip=1907 & op=NO_OP) ->
  // global address of headers.ethernet.dstAddr
  (op' = OP_CONST) &
  (x1' = 769)
  ;

[] (eip=1908 & op=NO_OP) ->
  // global address of headers.ethernet.etherType
  (op' = OP_CONST) &
  (x1' = 817)
  ;

// memcpy(src,dst,length)
[] (eip=1909 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1910 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=1911 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1912 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1913 & op=NO_OP) ->
  // global address of main.temp6_LIST_5
  (op' = OP_CONST) &
  (x1' = 1397)
  ;

[] (eip=1914 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=1915 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1916 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1917 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_POPN) &
  (x1' = 5)
  ;

[] (eip=1918 & op=NO_OP) ->
  // global address of main.temp6_LIST_5
  (op' = OP_CONST) &
  (x1' = 1397)
  ;

// end of {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
// {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
[] (eip=1919 & op=NO_OP) ->
  // global address of headers.ipv4.valid
  (op' = OP_CONST) &
  (x1' = 833)
  ;

[] (eip=1920 & op=NO_OP) ->
  // global address of headers.ipv4.size
  (op' = OP_CONST) &
  (x1' = 834)
  ;

[] (eip=1921 & op=NO_OP) ->
  // global address of headers.ipv4.version
  (op' = OP_CONST) &
  (x1' = 835)
  ;

[] (eip=1922 & op=NO_OP) ->
  // global address of headers.ipv4.ihl
  (op' = OP_CONST) &
  (x1' = 839)
  ;

[] (eip=1923 & op=NO_OP) ->
  // global address of headers.ipv4.diffserv
  (op' = OP_CONST) &
  (x1' = 843)
  ;

[] (eip=1924 & op=NO_OP) ->
  // global address of headers.ipv4.totalLen
  (op' = OP_CONST) &
  (x1' = 851)
  ;

[] (eip=1925 & op=NO_OP) ->
  // global address of headers.ipv4.identification
  (op' = OP_CONST) &
  (x1' = 867)
  ;

[] (eip=1926 & op=NO_OP) ->
  // global address of headers.ipv4.flags
  (op' = OP_CONST) &
  (x1' = 883)
  ;

[] (eip=1927 & op=NO_OP) ->
  // global address of headers.ipv4.fragOffset
  (op' = OP_CONST) &
  (x1' = 886)
  ;

[] (eip=1928 & op=NO_OP) ->
  // global address of headers.ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 899)
  ;

[] (eip=1929 & op=NO_OP) ->
  // global address of headers.ipv4.protocol
  (op' = OP_CONST) &
  (x1' = 907)
  ;

[] (eip=1930 & op=NO_OP) ->
  // global address of headers.ipv4.hdrChecksum
  (op' = OP_CONST) &
  (x1' = 915)
  ;

[] (eip=1931 & op=NO_OP) ->
  // global address of headers.ipv4.srcAddr
  (op' = OP_CONST) &
  (x1' = 931)
  ;

[] (eip=1932 & op=NO_OP) ->
  // global address of headers.ipv4.dstAddr
  (op' = OP_CONST) &
  (x1' = 963)
  ;

// memcpy(src,dst,length)
[] (eip=1933 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1934 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=1935 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1936 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1937 & op=NO_OP) ->
  // global address of main.temp7_LIST_14
  (op' = OP_CONST) &
  (x1' = 1402)
  ;

[] (eip=1938 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=1939 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1940 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1941 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_POPN) &
  (x1' = 14)
  ;

[] (eip=1942 & op=NO_OP) ->
  // global address of main.temp7_LIST_14
  (op' = OP_CONST) &
  (x1' = 1402)
  ;

// end of {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
// memcpy(src,dst,length)
[] (eip=1943 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1944 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=1945 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1946 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1947 & op=NO_OP) ->
  // global address of main.temp8_LIST_2
  (op' = OP_CONST) &
  (x1' = 1416)
  ;

[] (eip=1948 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=1949 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1950 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1951 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_POPN) &
  (x1' = 2)
  ;

[] (eip=1952 & op=NO_OP) ->
  // global address of main.temp8_LIST_2
  (op' = OP_CONST) &
  (x1' = 1416)
  ;

// end of {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
// {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
[] (eip=1953 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.vrf
  (op' = OP_CONST) &
  (x1' = 675)
  ;

[] (eip=1954 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.bd
  (op' = OP_CONST) &
  (x1' = 687)
  ;

[] (eip=1955 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.nexthop_index
  (op' = OP_CONST) &
  (x1' = 703)
  ;

// memcpy(src,dst,length)
[] (eip=1956 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1957 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=1958 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1959 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1960 & op=NO_OP) ->
  // global address of main.temp9_LIST_3
  (op' = OP_CONST) &
  (x1' = 1418)
  ;

[] (eip=1961 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=1962 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1963 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1964 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_POPN) &
  (x1' = 3)
  ;

[] (eip=1965 & op=NO_OP) ->
  // global address of main.temp9_LIST_3
  (op' = OP_CONST) &
  (x1' = 1418)
  ;

// end of {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
// memcpy(src,dst,length)
[] (eip=1966 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1967 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1968 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1969 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1970 & op=NO_OP) ->
  // global address of main.temp10_LIST_1
  (op' = OP_CONST) &
  (x1' = 1421)
  ;

[] (eip=1971 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=1972 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1973 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=1974 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_POPN) &
  (x1' = 1)
  ;

[] (eip=1975 & op=NO_OP) ->
  // global address of main.temp10_LIST_1
  (op' = OP_CONST) &
  (x1' = 1421)
  ;

// end of {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
// {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority}
[] (eip=1976 & op=NO_OP) ->
  // global address of standard_metadata_t.ingress_port
  (op' = OP_CONST) &
  (x1' = 305)
  ;

[] (eip=1977 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_spec
  (op' = OP_CONST) &
  (x1' = 314)
  ;

[] (eip=1978 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_port
  (op' = OP_CONST) &
  (x1' = 323)
  ;

[] (eip=1979 & op=NO_OP) ->
  // global address of standard_metadata_t.instance_type
  (op' = OP_CONST) &
  (x1' = 332)
  ;

[] (eip=1980 & op=NO_OP) ->
  // global address of standard_metadata_t.packet_length
  (op' = OP_CONST) &
  (x1' = 364)
  ;

[] (eip=1981 & op=NO_OP) ->
  // global address of standard_metadata_t.enq_timestamp
  (op' = OP_CONST) &
  (x1' = 396)
  ;

[] (eip=1982 & op=NO_OP) ->
  // global address of standard_metadata_t.enq_qdepth
  (op' = OP_CONST) &
  (x1' = 428)
  ;

[] (eip=1983 & op=NO_OP) ->
  // global address of standard_metadata_t.deq_timedelta
  (op' = OP_CONST) &
  (x1' = 447)
  ;

[] (eip=1984 & op=NO_OP) ->
  // global address of standard_metadata_t.deq_qdepth
  (op' = OP_CONST) &
  (x1' = 479)
  ;

[] (eip=1985 & op=NO_OP) ->
  // global address of standard_metadata_t.ingress_global_timestamp
  (op' = OP_CONST) &
  (x1' = 498)
  ;

[] (eip=1986 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_global_timestamp
  (op' = OP_CONST) &
  (x1' = 546)
  ;

[] (eip=1987 & op=NO_OP) ->
  // global address of standard_metadata_t.mcast_grp
  (op' = OP_CONST) &
  (x1' = 594)
  ;

[] (eip=1988 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_rid
  (op' = OP_CONST) &
  (x1' = 610)
  ;

[] (eip=1989 & op=NO_OP) ->
  // global address of standard_metadata_t.checksum_error
  (op' = OP_CONST) &
  (x1' = 626)
  ;

[] (eip=1990 & op=NO_OP) ->
  // global address of standard_metadata_t.parser_error
  (op' = OP_CONST) &
  (x1' = 627)
  ;

[] (eip=1991 & op=NO_OP) ->
  // global address of standard_metadata_t.priority
  (op' = OP_CONST) &
  (x1' = 628)
  ;

// memcpy(src,dst,length)
[] (eip=1992 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=1993 & op=NO_OP) ->
  // 16: size of: list
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1994 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=1995 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=1996 & op=NO_OP) ->
  // global address of main.temp11_LIST_16
  (op' = OP_CONST) &
  (x1' = 1422)
  ;

[] (eip=1997 & op=NO_OP) ->
  // 16: size of: list
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=1998 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=1999 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2000 & op=NO_OP) ->
  // 16: size of: list
  (op' = OP_POPN) &
  (x1' = 16)
  ;

[] (eip=2001 & op=NO_OP) ->
  // global address of main.temp11_LIST_16
  (op' = OP_CONST) &
  (x1' = 1422)
  ;

// end of {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority}
[] (eip=2002 & op=NO_OP) ->
  // 12: label to ::ingress, 3: size of: {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}, {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority}
  (op' = OP_INVOKE) &
  (x4' = 12) &
  (x5' = 3)
  ;

[] (eip=2003 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// verifyChecksum({{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}})
// {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
[] (eip=2004 & op=NO_OP) ->
  // global address of headers.ethernet.valid
  (op' = OP_CONST) &
  (x1' = 719)
  ;

[] (eip=2005 & op=NO_OP) ->
  // global address of headers.ethernet.size
  (op' = OP_CONST) &
  (x1' = 720)
  ;

[] (eip=2006 & op=NO_OP) ->
  // global address of headers.ethernet.srcAddr
  (op' = OP_CONST) &
  (x1' = 721)
  ;

[] (eip=2007 & op=NO_OP) ->
  // global address of headers.ethernet.dstAddr
  (op' = OP_CONST) &
  (x1' = 769)
  ;

[] (eip=2008 & op=NO_OP) ->
  // global address of headers.ethernet.etherType
  (op' = OP_CONST) &
  (x1' = 817)
  ;

// memcpy(src,dst,length)
[] (eip=2009 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2010 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=2011 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2012 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2013 & op=NO_OP) ->
  // global address of main.temp12_LIST_5
  (op' = OP_CONST) &
  (x1' = 1438)
  ;

[] (eip=2014 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=2015 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2016 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2017 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_POPN) &
  (x1' = 5)
  ;

[] (eip=2018 & op=NO_OP) ->
  // global address of main.temp12_LIST_5
  (op' = OP_CONST) &
  (x1' = 1438)
  ;

// end of {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
// {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
[] (eip=2019 & op=NO_OP) ->
  // global address of headers.ipv4.valid
  (op' = OP_CONST) &
  (x1' = 833)
  ;

[] (eip=2020 & op=NO_OP) ->
  // global address of headers.ipv4.size
  (op' = OP_CONST) &
  (x1' = 834)
  ;

[] (eip=2021 & op=NO_OP) ->
  // global address of headers.ipv4.version
  (op' = OP_CONST) &
  (x1' = 835)
  ;

[] (eip=2022 & op=NO_OP) ->
  // global address of headers.ipv4.ihl
  (op' = OP_CONST) &
  (x1' = 839)
  ;

[] (eip=2023 & op=NO_OP) ->
  // global address of headers.ipv4.diffserv
  (op' = OP_CONST) &
  (x1' = 843)
  ;

[] (eip=2024 & op=NO_OP) ->
  // global address of headers.ipv4.totalLen
  (op' = OP_CONST) &
  (x1' = 851)
  ;

[] (eip=2025 & op=NO_OP) ->
  // global address of headers.ipv4.identification
  (op' = OP_CONST) &
  (x1' = 867)
  ;

[] (eip=2026 & op=NO_OP) ->
  // global address of headers.ipv4.flags
  (op' = OP_CONST) &
  (x1' = 883)
  ;

[] (eip=2027 & op=NO_OP) ->
  // global address of headers.ipv4.fragOffset
  (op' = OP_CONST) &
  (x1' = 886)
  ;

[] (eip=2028 & op=NO_OP) ->
  // global address of headers.ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 899)
  ;

[] (eip=2029 & op=NO_OP) ->
  // global address of headers.ipv4.protocol
  (op' = OP_CONST) &
  (x1' = 907)
  ;

[] (eip=2030 & op=NO_OP) ->
  // global address of headers.ipv4.hdrChecksum
  (op' = OP_CONST) &
  (x1' = 915)
  ;

[] (eip=2031 & op=NO_OP) ->
  // global address of headers.ipv4.srcAddr
  (op' = OP_CONST) &
  (x1' = 931)
  ;

[] (eip=2032 & op=NO_OP) ->
  // global address of headers.ipv4.dstAddr
  (op' = OP_CONST) &
  (x1' = 963)
  ;

// memcpy(src,dst,length)
[] (eip=2033 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2034 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=2035 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2036 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2037 & op=NO_OP) ->
  // global address of main.temp13_LIST_14
  (op' = OP_CONST) &
  (x1' = 1443)
  ;

[] (eip=2038 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=2039 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2040 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2041 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_POPN) &
  (x1' = 14)
  ;

[] (eip=2042 & op=NO_OP) ->
  // global address of main.temp13_LIST_14
  (op' = OP_CONST) &
  (x1' = 1443)
  ;

// end of {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
// memcpy(src,dst,length)
[] (eip=2043 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2044 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=2045 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2046 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2047 & op=NO_OP) ->
  // global address of main.temp14_LIST_2
  (op' = OP_CONST) &
  (x1' = 1457)
  ;

[] (eip=2048 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=2049 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2050 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2051 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_POPN) &
  (x1' = 2)
  ;

[] (eip=2052 & op=NO_OP) ->
  // global address of main.temp14_LIST_2
  (op' = OP_CONST) &
  (x1' = 1457)
  ;

// end of {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
// {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
[] (eip=2053 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.vrf
  (op' = OP_CONST) &
  (x1' = 675)
  ;

[] (eip=2054 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.bd
  (op' = OP_CONST) &
  (x1' = 687)
  ;

[] (eip=2055 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.nexthop_index
  (op' = OP_CONST) &
  (x1' = 703)
  ;

// memcpy(src,dst,length)
[] (eip=2056 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2057 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=2058 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2059 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2060 & op=NO_OP) ->
  // global address of main.temp15_LIST_3
  (op' = OP_CONST) &
  (x1' = 1459)
  ;

[] (eip=2061 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=2062 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2063 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2064 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_POPN) &
  (x1' = 3)
  ;

[] (eip=2065 & op=NO_OP) ->
  // global address of main.temp15_LIST_3
  (op' = OP_CONST) &
  (x1' = 1459)
  ;

// end of {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
// memcpy(src,dst,length)
[] (eip=2066 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2067 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2068 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2069 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2070 & op=NO_OP) ->
  // global address of main.temp16_LIST_1
  (op' = OP_CONST) &
  (x1' = 1462)
  ;

[] (eip=2071 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2072 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2073 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2074 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_POPN) &
  (x1' = 1)
  ;

[] (eip=2075 & op=NO_OP) ->
  // global address of main.temp16_LIST_1
  (op' = OP_CONST) &
  (x1' = 1462)
  ;

// end of {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
[] (eip=2076 & op=NO_OP) ->
  // 362: label to ::verifyChecksum, 2: size of: {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
  (op' = OP_INVOKE) &
  (x4' = 362) &
  (x5' = 2)
  ;

[] (eip=2077 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// egress({{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}, {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority})
// {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
[] (eip=2078 & op=NO_OP) ->
  // global address of headers.ethernet.valid
  (op' = OP_CONST) &
  (x1' = 719)
  ;

[] (eip=2079 & op=NO_OP) ->
  // global address of headers.ethernet.size
  (op' = OP_CONST) &
  (x1' = 720)
  ;

[] (eip=2080 & op=NO_OP) ->
  // global address of headers.ethernet.srcAddr
  (op' = OP_CONST) &
  (x1' = 721)
  ;

[] (eip=2081 & op=NO_OP) ->
  // global address of headers.ethernet.dstAddr
  (op' = OP_CONST) &
  (x1' = 769)
  ;

[] (eip=2082 & op=NO_OP) ->
  // global address of headers.ethernet.etherType
  (op' = OP_CONST) &
  (x1' = 817)
  ;

// memcpy(src,dst,length)
[] (eip=2083 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2084 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=2085 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2086 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2087 & op=NO_OP) ->
  // global address of main.temp17_LIST_5
  (op' = OP_CONST) &
  (x1' = 1463)
  ;

[] (eip=2088 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=2089 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2090 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2091 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_POPN) &
  (x1' = 5)
  ;

[] (eip=2092 & op=NO_OP) ->
  // global address of main.temp17_LIST_5
  (op' = OP_CONST) &
  (x1' = 1463)
  ;

// end of {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
// {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
[] (eip=2093 & op=NO_OP) ->
  // global address of headers.ipv4.valid
  (op' = OP_CONST) &
  (x1' = 833)
  ;

[] (eip=2094 & op=NO_OP) ->
  // global address of headers.ipv4.size
  (op' = OP_CONST) &
  (x1' = 834)
  ;

[] (eip=2095 & op=NO_OP) ->
  // global address of headers.ipv4.version
  (op' = OP_CONST) &
  (x1' = 835)
  ;

[] (eip=2096 & op=NO_OP) ->
  // global address of headers.ipv4.ihl
  (op' = OP_CONST) &
  (x1' = 839)
  ;

[] (eip=2097 & op=NO_OP) ->
  // global address of headers.ipv4.diffserv
  (op' = OP_CONST) &
  (x1' = 843)
  ;

[] (eip=2098 & op=NO_OP) ->
  // global address of headers.ipv4.totalLen
  (op' = OP_CONST) &
  (x1' = 851)
  ;

[] (eip=2099 & op=NO_OP) ->
  // global address of headers.ipv4.identification
  (op' = OP_CONST) &
  (x1' = 867)
  ;

[] (eip=2100 & op=NO_OP) ->
  // global address of headers.ipv4.flags
  (op' = OP_CONST) &
  (x1' = 883)
  ;

[] (eip=2101 & op=NO_OP) ->
  // global address of headers.ipv4.fragOffset
  (op' = OP_CONST) &
  (x1' = 886)
  ;

[] (eip=2102 & op=NO_OP) ->
  // global address of headers.ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 899)
  ;

[] (eip=2103 & op=NO_OP) ->
  // global address of headers.ipv4.protocol
  (op' = OP_CONST) &
  (x1' = 907)
  ;

[] (eip=2104 & op=NO_OP) ->
  // global address of headers.ipv4.hdrChecksum
  (op' = OP_CONST) &
  (x1' = 915)
  ;

[] (eip=2105 & op=NO_OP) ->
  // global address of headers.ipv4.srcAddr
  (op' = OP_CONST) &
  (x1' = 931)
  ;

[] (eip=2106 & op=NO_OP) ->
  // global address of headers.ipv4.dstAddr
  (op' = OP_CONST) &
  (x1' = 963)
  ;

// memcpy(src,dst,length)
[] (eip=2107 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2108 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=2109 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2110 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2111 & op=NO_OP) ->
  // global address of main.temp18_LIST_14
  (op' = OP_CONST) &
  (x1' = 1468)
  ;

[] (eip=2112 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=2113 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2114 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2115 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_POPN) &
  (x1' = 14)
  ;

[] (eip=2116 & op=NO_OP) ->
  // global address of main.temp18_LIST_14
  (op' = OP_CONST) &
  (x1' = 1468)
  ;

// end of {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
// memcpy(src,dst,length)
[] (eip=2117 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2118 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=2119 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2120 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2121 & op=NO_OP) ->
  // global address of main.temp19_LIST_2
  (op' = OP_CONST) &
  (x1' = 1482)
  ;

[] (eip=2122 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=2123 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2124 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2125 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_POPN) &
  (x1' = 2)
  ;

[] (eip=2126 & op=NO_OP) ->
  // global address of main.temp19_LIST_2
  (op' = OP_CONST) &
  (x1' = 1482)
  ;

// end of {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
// {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
[] (eip=2127 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.vrf
  (op' = OP_CONST) &
  (x1' = 675)
  ;

[] (eip=2128 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.bd
  (op' = OP_CONST) &
  (x1' = 687)
  ;

[] (eip=2129 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.nexthop_index
  (op' = OP_CONST) &
  (x1' = 703)
  ;

// memcpy(src,dst,length)
[] (eip=2130 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2131 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=2132 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2133 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2134 & op=NO_OP) ->
  // global address of main.temp20_LIST_3
  (op' = OP_CONST) &
  (x1' = 1484)
  ;

[] (eip=2135 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=2136 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2137 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2138 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_POPN) &
  (x1' = 3)
  ;

[] (eip=2139 & op=NO_OP) ->
  // global address of main.temp20_LIST_3
  (op' = OP_CONST) &
  (x1' = 1484)
  ;

// end of {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
// memcpy(src,dst,length)
[] (eip=2140 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2141 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2142 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2143 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2144 & op=NO_OP) ->
  // global address of main.temp21_LIST_1
  (op' = OP_CONST) &
  (x1' = 1487)
  ;

[] (eip=2145 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2146 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2147 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2148 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_POPN) &
  (x1' = 1)
  ;

[] (eip=2149 & op=NO_OP) ->
  // global address of main.temp21_LIST_1
  (op' = OP_CONST) &
  (x1' = 1487)
  ;

// end of {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
// {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority}
[] (eip=2150 & op=NO_OP) ->
  // global address of standard_metadata_t.ingress_port
  (op' = OP_CONST) &
  (x1' = 305)
  ;

[] (eip=2151 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_spec
  (op' = OP_CONST) &
  (x1' = 314)
  ;

[] (eip=2152 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_port
  (op' = OP_CONST) &
  (x1' = 323)
  ;

[] (eip=2153 & op=NO_OP) ->
  // global address of standard_metadata_t.instance_type
  (op' = OP_CONST) &
  (x1' = 332)
  ;

[] (eip=2154 & op=NO_OP) ->
  // global address of standard_metadata_t.packet_length
  (op' = OP_CONST) &
  (x1' = 364)
  ;

[] (eip=2155 & op=NO_OP) ->
  // global address of standard_metadata_t.enq_timestamp
  (op' = OP_CONST) &
  (x1' = 396)
  ;

[] (eip=2156 & op=NO_OP) ->
  // global address of standard_metadata_t.enq_qdepth
  (op' = OP_CONST) &
  (x1' = 428)
  ;

[] (eip=2157 & op=NO_OP) ->
  // global address of standard_metadata_t.deq_timedelta
  (op' = OP_CONST) &
  (x1' = 447)
  ;

[] (eip=2158 & op=NO_OP) ->
  // global address of standard_metadata_t.deq_qdepth
  (op' = OP_CONST) &
  (x1' = 479)
  ;

[] (eip=2159 & op=NO_OP) ->
  // global address of standard_metadata_t.ingress_global_timestamp
  (op' = OP_CONST) &
  (x1' = 498)
  ;

[] (eip=2160 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_global_timestamp
  (op' = OP_CONST) &
  (x1' = 546)
  ;

[] (eip=2161 & op=NO_OP) ->
  // global address of standard_metadata_t.mcast_grp
  (op' = OP_CONST) &
  (x1' = 594)
  ;

[] (eip=2162 & op=NO_OP) ->
  // global address of standard_metadata_t.egress_rid
  (op' = OP_CONST) &
  (x1' = 610)
  ;

[] (eip=2163 & op=NO_OP) ->
  // global address of standard_metadata_t.checksum_error
  (op' = OP_CONST) &
  (x1' = 626)
  ;

[] (eip=2164 & op=NO_OP) ->
  // global address of standard_metadata_t.parser_error
  (op' = OP_CONST) &
  (x1' = 627)
  ;

[] (eip=2165 & op=NO_OP) ->
  // global address of standard_metadata_t.priority
  (op' = OP_CONST) &
  (x1' = 628)
  ;

// memcpy(src,dst,length)
[] (eip=2166 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2167 & op=NO_OP) ->
  // 16: size of: list
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=2168 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2169 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2170 & op=NO_OP) ->
  // global address of main.temp22_LIST_16
  (op' = OP_CONST) &
  (x1' = 1488)
  ;

[] (eip=2171 & op=NO_OP) ->
  // 16: size of: list
  (op' = OP_CONST) &
  (x1' = 16)
  ;

[] (eip=2172 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2173 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2174 & op=NO_OP) ->
  // 16: size of: list
  (op' = OP_POPN) &
  (x1' = 16)
  ;

[] (eip=2175 & op=NO_OP) ->
  // global address of main.temp22_LIST_16
  (op' = OP_CONST) &
  (x1' = 1488)
  ;

// end of {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority}
[] (eip=2176 & op=NO_OP) ->
  // 468: label to ::egress, 3: size of: {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}, {standard_metadata_t.ingress_port,standard_metadata_t.egress_spec,standard_metadata_t.egress_port,standard_metadata_t.instance_type,standard_metadata_t.packet_length,standard_metadata_t.enq_timestamp,standard_metadata_t.enq_qdepth,standard_metadata_t.deq_timedelta,standard_metadata_t.deq_qdepth,standard_metadata_t.ingress_global_timestamp,standard_metadata_t.egress_global_timestamp,standard_metadata_t.mcast_grp,standard_metadata_t.egress_rid,standard_metadata_t.checksum_error,standard_metadata_t.parser_error,standard_metadata_t.priority}
  (op' = OP_INVOKE) &
  (x4' = 468) &
  (x5' = 3)
  ;

[] (eip=2177 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// computeChecksum({{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}})
// {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
[] (eip=2178 & op=NO_OP) ->
  // global address of headers.ethernet.valid
  (op' = OP_CONST) &
  (x1' = 719)
  ;

[] (eip=2179 & op=NO_OP) ->
  // global address of headers.ethernet.size
  (op' = OP_CONST) &
  (x1' = 720)
  ;

[] (eip=2180 & op=NO_OP) ->
  // global address of headers.ethernet.srcAddr
  (op' = OP_CONST) &
  (x1' = 721)
  ;

[] (eip=2181 & op=NO_OP) ->
  // global address of headers.ethernet.dstAddr
  (op' = OP_CONST) &
  (x1' = 769)
  ;

[] (eip=2182 & op=NO_OP) ->
  // global address of headers.ethernet.etherType
  (op' = OP_CONST) &
  (x1' = 817)
  ;

// memcpy(src,dst,length)
[] (eip=2183 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2184 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=2185 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2186 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2187 & op=NO_OP) ->
  // global address of main.temp23_LIST_5
  (op' = OP_CONST) &
  (x1' = 1504)
  ;

[] (eip=2188 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=2189 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2190 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2191 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_POPN) &
  (x1' = 5)
  ;

[] (eip=2192 & op=NO_OP) ->
  // global address of main.temp23_LIST_5
  (op' = OP_CONST) &
  (x1' = 1504)
  ;

// end of {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
// {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
[] (eip=2193 & op=NO_OP) ->
  // global address of headers.ipv4.valid
  (op' = OP_CONST) &
  (x1' = 833)
  ;

[] (eip=2194 & op=NO_OP) ->
  // global address of headers.ipv4.size
  (op' = OP_CONST) &
  (x1' = 834)
  ;

[] (eip=2195 & op=NO_OP) ->
  // global address of headers.ipv4.version
  (op' = OP_CONST) &
  (x1' = 835)
  ;

[] (eip=2196 & op=NO_OP) ->
  // global address of headers.ipv4.ihl
  (op' = OP_CONST) &
  (x1' = 839)
  ;

[] (eip=2197 & op=NO_OP) ->
  // global address of headers.ipv4.diffserv
  (op' = OP_CONST) &
  (x1' = 843)
  ;

[] (eip=2198 & op=NO_OP) ->
  // global address of headers.ipv4.totalLen
  (op' = OP_CONST) &
  (x1' = 851)
  ;

[] (eip=2199 & op=NO_OP) ->
  // global address of headers.ipv4.identification
  (op' = OP_CONST) &
  (x1' = 867)
  ;

[] (eip=2200 & op=NO_OP) ->
  // global address of headers.ipv4.flags
  (op' = OP_CONST) &
  (x1' = 883)
  ;

[] (eip=2201 & op=NO_OP) ->
  // global address of headers.ipv4.fragOffset
  (op' = OP_CONST) &
  (x1' = 886)
  ;

[] (eip=2202 & op=NO_OP) ->
  // global address of headers.ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 899)
  ;

[] (eip=2203 & op=NO_OP) ->
  // global address of headers.ipv4.protocol
  (op' = OP_CONST) &
  (x1' = 907)
  ;

[] (eip=2204 & op=NO_OP) ->
  // global address of headers.ipv4.hdrChecksum
  (op' = OP_CONST) &
  (x1' = 915)
  ;

[] (eip=2205 & op=NO_OP) ->
  // global address of headers.ipv4.srcAddr
  (op' = OP_CONST) &
  (x1' = 931)
  ;

[] (eip=2206 & op=NO_OP) ->
  // global address of headers.ipv4.dstAddr
  (op' = OP_CONST) &
  (x1' = 963)
  ;

// memcpy(src,dst,length)
[] (eip=2207 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2208 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=2209 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2210 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2211 & op=NO_OP) ->
  // global address of main.temp24_LIST_14
  (op' = OP_CONST) &
  (x1' = 1509)
  ;

[] (eip=2212 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=2213 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2214 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2215 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_POPN) &
  (x1' = 14)
  ;

[] (eip=2216 & op=NO_OP) ->
  // global address of main.temp24_LIST_14
  (op' = OP_CONST) &
  (x1' = 1509)
  ;

// end of {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
// memcpy(src,dst,length)
[] (eip=2217 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2218 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=2219 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2220 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2221 & op=NO_OP) ->
  // global address of main.temp25_LIST_2
  (op' = OP_CONST) &
  (x1' = 1523)
  ;

[] (eip=2222 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=2223 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2224 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2225 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_POPN) &
  (x1' = 2)
  ;

[] (eip=2226 & op=NO_OP) ->
  // global address of main.temp25_LIST_2
  (op' = OP_CONST) &
  (x1' = 1523)
  ;

// end of {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
// {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
[] (eip=2227 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.vrf
  (op' = OP_CONST) &
  (x1' = 675)
  ;

[] (eip=2228 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.bd
  (op' = OP_CONST) &
  (x1' = 687)
  ;

[] (eip=2229 & op=NO_OP) ->
  // global address of metadata.ingress_metadata.nexthop_index
  (op' = OP_CONST) &
  (x1' = 703)
  ;

// memcpy(src,dst,length)
[] (eip=2230 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2231 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=2232 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2233 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2234 & op=NO_OP) ->
  // global address of main.temp26_LIST_3
  (op' = OP_CONST) &
  (x1' = 1525)
  ;

[] (eip=2235 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_CONST) &
  (x1' = 3)
  ;

[] (eip=2236 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2237 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2238 & op=NO_OP) ->
  // 3: size of: list
  (op' = OP_POPN) &
  (x1' = 3)
  ;

[] (eip=2239 & op=NO_OP) ->
  // global address of main.temp26_LIST_3
  (op' = OP_CONST) &
  (x1' = 1525)
  ;

// end of {metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}
// memcpy(src,dst,length)
[] (eip=2240 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2241 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2242 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2243 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2244 & op=NO_OP) ->
  // global address of main.temp27_LIST_1
  (op' = OP_CONST) &
  (x1' = 1528)
  ;

[] (eip=2245 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2246 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2247 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2248 & op=NO_OP) ->
  // 1: size of: list
  (op' = OP_POPN) &
  (x1' = 1)
  ;

[] (eip=2249 & op=NO_OP) ->
  // global address of main.temp27_LIST_1
  (op' = OP_CONST) &
  (x1' = 1528)
  ;

// end of {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
[] (eip=2250 & op=NO_OP) ->
  // 62: label to ::computeChecksum, 2: size of: {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}, {{metadata.ingress_metadata.vrf,metadata.ingress_metadata.bd,metadata.ingress_metadata.nexthop_index}}
  (op' = OP_INVOKE) &
  (x4' = 62) &
  (x5' = 2)
  ;

[] (eip=2251 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// DeparserImpl(packet_out, {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}})
[] (eip=2252 & op=NO_OP) ->
  // global address of packet_out
  (op' = OP_CONST) &
  (x1' = 273)
  ;

// {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
// {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
[] (eip=2253 & op=NO_OP) ->
  // global address of headers.ethernet.valid
  (op' = OP_CONST) &
  (x1' = 719)
  ;

[] (eip=2254 & op=NO_OP) ->
  // global address of headers.ethernet.size
  (op' = OP_CONST) &
  (x1' = 720)
  ;

[] (eip=2255 & op=NO_OP) ->
  // global address of headers.ethernet.srcAddr
  (op' = OP_CONST) &
  (x1' = 721)
  ;

[] (eip=2256 & op=NO_OP) ->
  // global address of headers.ethernet.dstAddr
  (op' = OP_CONST) &
  (x1' = 769)
  ;

[] (eip=2257 & op=NO_OP) ->
  // global address of headers.ethernet.etherType
  (op' = OP_CONST) &
  (x1' = 817)
  ;

// memcpy(src,dst,length)
[] (eip=2258 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2259 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=2260 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2261 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2262 & op=NO_OP) ->
  // global address of main.temp28_LIST_5
  (op' = OP_CONST) &
  (x1' = 1529)
  ;

[] (eip=2263 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_CONST) &
  (x1' = 5)
  ;

[] (eip=2264 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2265 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2266 & op=NO_OP) ->
  // 5: size of: list
  (op' = OP_POPN) &
  (x1' = 5)
  ;

[] (eip=2267 & op=NO_OP) ->
  // global address of main.temp28_LIST_5
  (op' = OP_CONST) &
  (x1' = 1529)
  ;

// end of {headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType}
// {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
[] (eip=2268 & op=NO_OP) ->
  // global address of headers.ipv4.valid
  (op' = OP_CONST) &
  (x1' = 833)
  ;

[] (eip=2269 & op=NO_OP) ->
  // global address of headers.ipv4.size
  (op' = OP_CONST) &
  (x1' = 834)
  ;

[] (eip=2270 & op=NO_OP) ->
  // global address of headers.ipv4.version
  (op' = OP_CONST) &
  (x1' = 835)
  ;

[] (eip=2271 & op=NO_OP) ->
  // global address of headers.ipv4.ihl
  (op' = OP_CONST) &
  (x1' = 839)
  ;

[] (eip=2272 & op=NO_OP) ->
  // global address of headers.ipv4.diffserv
  (op' = OP_CONST) &
  (x1' = 843)
  ;

[] (eip=2273 & op=NO_OP) ->
  // global address of headers.ipv4.totalLen
  (op' = OP_CONST) &
  (x1' = 851)
  ;

[] (eip=2274 & op=NO_OP) ->
  // global address of headers.ipv4.identification
  (op' = OP_CONST) &
  (x1' = 867)
  ;

[] (eip=2275 & op=NO_OP) ->
  // global address of headers.ipv4.flags
  (op' = OP_CONST) &
  (x1' = 883)
  ;

[] (eip=2276 & op=NO_OP) ->
  // global address of headers.ipv4.fragOffset
  (op' = OP_CONST) &
  (x1' = 886)
  ;

[] (eip=2277 & op=NO_OP) ->
  // global address of headers.ipv4.ttl
  (op' = OP_CONST) &
  (x1' = 899)
  ;

[] (eip=2278 & op=NO_OP) ->
  // global address of headers.ipv4.protocol
  (op' = OP_CONST) &
  (x1' = 907)
  ;

[] (eip=2279 & op=NO_OP) ->
  // global address of headers.ipv4.hdrChecksum
  (op' = OP_CONST) &
  (x1' = 915)
  ;

[] (eip=2280 & op=NO_OP) ->
  // global address of headers.ipv4.srcAddr
  (op' = OP_CONST) &
  (x1' = 931)
  ;

[] (eip=2281 & op=NO_OP) ->
  // global address of headers.ipv4.dstAddr
  (op' = OP_CONST) &
  (x1' = 963)
  ;

// memcpy(src,dst,length)
[] (eip=2282 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2283 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=2284 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2285 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2286 & op=NO_OP) ->
  // global address of main.temp29_LIST_14
  (op' = OP_CONST) &
  (x1' = 1534)
  ;

[] (eip=2287 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_CONST) &
  (x1' = 14)
  ;

[] (eip=2288 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2289 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2290 & op=NO_OP) ->
  // 14: size of: list
  (op' = OP_POPN) &
  (x1' = 14)
  ;

[] (eip=2291 & op=NO_OP) ->
  // global address of main.temp29_LIST_14
  (op' = OP_CONST) &
  (x1' = 1534)
  ;

// end of {headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}
// memcpy(src,dst,length)
[] (eip=2292 & op=NO_OP) ->
  (op' = OP_DEREF_TOP)
  ;

[] (eip=2293 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=2294 & op=NO_OP) ->
  (op' = OP_SUB)
  ;

[] (eip=2295 & op=NO_OP) ->
  (op' = OP_INC)
  ;

[] (eip=2296 & op=NO_OP) ->
  // global address of main.temp30_LIST_2
  (op' = OP_CONST) &
  (x1' = 1548)
  ;

[] (eip=2297 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=2298 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2299 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// end of memcpy(src,dst,length)
[] (eip=2300 & op=NO_OP) ->
  // 2: size of: list
  (op' = OP_POPN) &
  (x1' = 2)
  ;

[] (eip=2301 & op=NO_OP) ->
  // global address of main.temp30_LIST_2
  (op' = OP_CONST) &
  (x1' = 1548)
  ;

// end of {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
[] (eip=2302 & op=NO_OP) ->
  // 346: label to ::DeparserImpl, 2: size of: packet_out, {{headers.ethernet.valid,headers.ethernet.size,headers.ethernet.srcAddr,headers.ethernet.dstAddr,headers.ethernet.etherType},{headers.ipv4.valid,headers.ipv4.size,headers.ipv4.version,headers.ipv4.ihl,headers.ipv4.diffserv,headers.ipv4.totalLen,headers.ipv4.identification,headers.ipv4.flags,headers.ipv4.fragOffset,headers.ipv4.ttl,headers.ipv4.protocol,headers.ipv4.hdrChecksum,headers.ipv4.srcAddr,headers.ipv4.dstAddr}}
  (op' = OP_INVOKE) &
  (x4' = 346) &
  (x5' = 2)
  ;

[] (eip=2303 & op=NO_OP) ->
  (op' = OP_POP)
  ;

[] (eip=2304 & op=NO_OP) ->
  // 0: main terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=2305 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of main()
//

// definition of isValid(hdr)
[] (eip=2306 & op=NO_OP) ->
  // 0: local address of hdr.valid
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=2307 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2308 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2309 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of isValid(::isValid/hdr hdr)
//

// definition of extract()
// memcpy(packet.buffer, hdr, hdr.size)
// packet.buffer + packet.cursor
[] (eip=2310 & op=NO_OP) ->
  // 0: local address of packet
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=2311 & op=NO_OP) ->
  // 1: size of: offset: cursor
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2312 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=2313 & op=NO_OP) ->
  // 0: local address of packet
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=2314 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2315 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

// contents of hdr
[] (eip=2316 & op=NO_OP) ->
  // 1: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=2317 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2318 & op=NO_OP) ->
  // 2: size of: offset: validity bit, size
  (op' = OP_CONST) &
  (x1' = 2)
  ;

[] (eip=2319 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

// hdr.size
[] (eip=2320 & op=NO_OP) ->
  // 1: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=2321 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2322 & op=NO_OP) ->
  // 1: size of: offset: validity bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2323 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=2324 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2325 & op=NO_OP) ->
  // 1783: label to stdlib::memcpy, 3: size of: src, dst, length
  (op' = OP_INVOKE) &
  (x4' = 1783) &
  (x5' = 3)
  ;

[] (eip=2326 & op=NO_OP) ->
  (op' = OP_POP)
  ;

// set validity to 1
[] (eip=2327 & op=NO_OP) ->
  // 1: valid
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2328 & op=NO_OP) ->
  // 1: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=2329 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2330 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

// packet.cursor = packet.cursor + 1
[] (eip=2331 & op=NO_OP) ->
  // 0: local address of packet.cursor
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=2332 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2333 & op=NO_OP) ->
  // 1: local address of hdr
  (op' = OP_LOAD) &
  (x1' = 1)
  ;

[] (eip=2334 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2335 & op=NO_OP) ->
  // 1: size of: offset: validity bit
  (op' = OP_CONST) &
  (x1' = 1)
  ;

[] (eip=2336 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=2337 & op=NO_OP) ->
  (op' = OP_GETFIELD)
  ;

[] (eip=2338 & op=NO_OP) ->
  (op' = OP_ADD)
  ;

[] (eip=2339 & op=NO_OP) ->
  // 0: local address of packet.cursor
  (op' = OP_LOAD) &
  (x1' = 0)
  ;

[] (eip=2340 & op=NO_OP) ->
  (op' = OP_PUTFIELD)
  ;

[] (eip=2341 & op=NO_OP) ->
  // 0: extract terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=2342 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of extract()
//

// definition of emit()
// TODO
[] (eip=2343 & op=NO_OP) ->
  // 0: emit terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=2344 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of emit()
//

// definition of update_checksum()
// TODO
[] (eip=2345 & op=NO_OP) ->
  // 0: update_checksum terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=2346 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of update_checksum()
//

// definition of verify_checksum()
// TODO
[] (eip=2347 & op=NO_OP) ->
  // 0: verify_checksum terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=2348 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of verify_checksum()
//

// definition of mark_to_drop()
// TODO
[] (eip=2349 & op=NO_OP) ->
  // 0: mark_to_drop terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=2350 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

// end of definition of mark_to_drop()
//

// definition of count()
// TODO
[] (eip=2351 & op=NO_OP) ->
  // 0: count terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=2352 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

//  
// end of definition of count()
//

// definition of setInvalid()
// TODO
[] (eip=2353 & op=NO_OP) ->
  // 0: setInvalid terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=2354 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

//  
// end of definition of setInvalid()
//

// definition of setValid()
// TODO
[] (eip=2355 & op=NO_OP) ->
  // 0: setValid terminates with status OK
  (op' = OP_CONST) &
  (x1' = 0)
  ;

[] (eip=2356 & op=NO_OP) ->
  (op' = OP_RETURN)
  ;

//  
// end of definition of setValid()
//

