@article{p4paper,
        author = {Bosshart, Pat and et. al},
        title = {P4: Programming Protocol-independent Packet Processors},
        journal = {SIGCOMM Comput. Commun. Rev.},
        issue_date = {July 2014},
        volume = {44},
        number = {3},
        month = jul,
        year = {2014},
        issn = {0146-4833},
        pages = {87--95},
        numpages = {9},
        url = {http://doi.acm.org/10.1145/2656877.2656890},
        doi = {10.1145/2656877.2656890},
        acmid = {2656890},
        publisher = {ACM},
        address = {New York, NY, USA},
        keywords = {p4, protocol-independent, reconfigurability, sdn},
    } 


@INPROCEEDINGS{p4dataflow,

  author={K. {Birnfeld} and D. C. {da Silva} and W. {Cordeiro} and B. B. N. {de França}},

  booktitle={NOMS 2020 - 2020 IEEE/IFIP Network Operations and Management Symposium}, 

  title={P4 Switch Code Data Flow Analysis: Towards Stronger Verification of Forwarding Plane Software}, 

  year={2020},

  volume={},

  number={},

  pages={1-8},

  doi={10.1109/NOMS47738.2020.9110307}}

@inproceedings{p4pktgen,
author = {N\"{o}tzli, Andres and Khan, Jehandad and Fingerhut, Andy and Barrett, Clark and Athanas, Peter},
title = {P4pktgen: Automated Test Case Generation for P4 Programs},
year = {2018},
isbn = {9781450356640},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3185467.3185497},
doi = {10.1145/3185467.3185497},
abstract = {With the rise of programmable network switches, network infrastructure is becoming more flexible and more capable than ever before. Programming languages such as P4 lower the barrier for changing the inner workings of network switches and offer a uniform experience across different devices. However, this programmability also brings the risk of introducing hard-to-catch bugs at a level that was previously covered by well-tested devices with a fixed set of capabilities. Subtle discrepancies between different implementations pose a risk of introducing bugs at a layer that is opaque to the user.To reap the benefit of programmable hardware and keep---or improve upon---the reliability of traditional approaches, new tools are needed. In this work, we present p4pktgen, a tool for automatically generating test cases for P4 programs using symbolic execution. These test cases can be used to validate that P4 programs act as intended on a device.},
booktitle = {Proceedings of the Symposium on SDN Research},
articleno = {5},
numpages = {7},
location = {Los Angeles, CA, USA},
series = {SOSR '18}
}

@inproceedings {flightplan,
	author = {Sultana, Nik and et. al},
	title = {Flightplan: Dataplane Disaggregation and Placement for P4 Programs},
	booktitle = {18th {USENIX} Symposium on Networked Systems Design and Implementation ({NSDI} 21)},
	year = {2021},
	isbn = {978-1-939133-21-2},
	url = {https://www.usenix.org/conference/nsdi21/presentation/sultana},
	publisher = {{USENIX} Association},
	month = apr,
}


@inproceedings{bf4,
author = {Dumitrescu, Dragos and Stoenescu, Radu and Negreanu, Lorina and Raiciu, Costin},
title = {Bf4: Towards Bug-Free P4 Programs},
year = {2020},
isbn = {9781450379557},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3387514.3405888},
doi = {10.1145/3387514.3405888},
abstract = {Recent verification work has made advances in finding bugs in P4 programs before deployment, but it requires that the programmer specifies table rules that are possible at runtime[32, 24, 27]. This imposes a specification burden on the programmer, while at the same time failing to guarantee that bugs will not be inserted at runtime by faulty controllers.We present bf4, a novel verification approach for P4 programs that uses a mix of static verification, code changes and runtime checks to ensure that the deployed P4 program is bug free. To achieve this, bf4 uses static analysis to find all possible bugs in the P4 program; for each possible bug, bf4 attempts to find predicates that, when applied to table rules inserted by the controller, make that bug unreachable. If such predicates do not exist, bf4 can change the P4 code and re-run the procedure above.We applied bf4 to a wide range of P4 programs; for all these, bf4 is able to generate controller assertions and propose fixes that guarantee no controller-induced bug is reachable. At runtime, bf4 checks that the controller does not insert faulty rules; when it does, it throws an exception which helps troubleshoot the bug.},
booktitle = {Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the Applications, Technologies, Architectures, and Protocols for Computer Communication},
pages = {571–585},
numpages = {15},
keywords = {Network dataplane verification, programmable networks},
location = {Virtual Event, USA},
series = {SIGCOMM '20}
}
  

@inproceedings{Assert-P4,
author = {Freire, Lucas and Neves, Miguel and Leal, Lucas and Levchenko, Kirill and Schaeffer-Filho, Alberto and Barcellos, Marinho},
title = {Uncovering Bugs in P4 Programs with Assertion-Based Verification},
year = {2018},
isbn = {9781450356640},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3185467.3185499},
doi = {10.1145/3185467.3185499},
abstract = {Recent trends in software-defined networking have extended network programmability to the data plane through programming languages such as P4. Unfortunately, the chance of introducing bugs in the network also increases significantly in this new context. Existing data plane verification approaches are unable to model P4 programs, or they present severe restrictions in the set of properties that can be modeled. In this paper, we introduce a data plane program verification approach based on assertion checking and symbolic execution. Network programmers annotate P4 programs with assertions expressing general security and correctness properties. Once annotated, these programs are transformed into C-based models and all their possible paths are symbolically executed. Results show that the proposed approach, called ASSERT-P4, can uncover a broad range of bugs and software flaws. Furthermore, experimental evaluation shows that it takes less than a minute for verifying various P4 applications proposed in the literature.},
booktitle = {Proceedings of the Symposium on SDN Research},
articleno = {4},
numpages = {7},
keywords = {P4, Verification, Programmable Data Planes},
location = {Los Angeles, CA, USA},
series = {SOSR '18}
}

  



