@article{p4paper,
        author = {Bosshart, Pat and et. al},
        title = {P4: Programming Protocol-independent Packet Processors},
        journal = {SIGCOMM Comput. Commun. Rev.},
        issue_date = {July 2014},
        volume = {44},
        number = {3},
        month = jul,
        year = {2014},
        issn = {0146-4833},
        pages = {87--95},
        numpages = {9},
        url = {http://doi.acm.org/10.1145/2656877.2656890},
        doi = {10.1145/2656877.2656890},
        acmid = {2656890},
        publisher = {ACM},
        address = {New York, NY, USA},
        keywords = {p4, protocol-independent, reconfigurability, sdn},
    } 


@INPROCEEDINGS{p4dataflow,

  author={K. {Birnfeld} and D. C. {da Silva} and W. {Cordeiro} and B. B. N. {de Fran√ßa}},

  booktitle={NOMS 2020 - 2020 IEEE/IFIP Network Operations and Management Symposium}, 

  title={P4 Switch Code Data Flow Analysis: Towards Stronger Verification of Forwarding Plane Software}, 

  year={2020},

  volume={},

  number={},

  pages={1-8},

  doi={10.1109/NOMS47738.2020.9110307}}

@inproceedings{p4pktgen,
author = {N\"{o}tzli, Andres and Khan, Jehandad and Fingerhut, Andy and Barrett, Clark and Athanas, Peter},
title = {P4pktgen: Automated Test Case Generation for P4 Programs},
year = {2018},
isbn = {9781450356640},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3185467.3185497},
doi = {10.1145/3185467.3185497},
abstract = {With the rise of programmable network switches, network infrastructure is becoming more flexible and more capable than ever before. Programming languages such as P4 lower the barrier for changing the inner workings of network switches and offer a uniform experience across different devices. However, this programmability also brings the risk of introducing hard-to-catch bugs at a level that was previously covered by well-tested devices with a fixed set of capabilities. Subtle discrepancies between different implementations pose a risk of introducing bugs at a layer that is opaque to the user.To reap the benefit of programmable hardware and keep---or improve upon---the reliability of traditional approaches, new tools are needed. In this work, we present p4pktgen, a tool for automatically generating test cases for P4 programs using symbolic execution. These test cases can be used to validate that P4 programs act as intended on a device.},
booktitle = {Proceedings of the Symposium on SDN Research},
articleno = {5},
numpages = {7},
location = {Los Angeles, CA, USA},
series = {SOSR '18}
}
  
